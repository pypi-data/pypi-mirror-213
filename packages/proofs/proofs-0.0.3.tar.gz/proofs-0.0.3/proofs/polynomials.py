# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_polynomials.ipynb.

# %% auto 0
__all__ = ['Polynomial', 'polynomial']

# %% ../nbs/01_polynomials.ipynb 3
from .core import *
import sympy as sp
from typing import Union

# %% ../nbs/01_polynomials.ipynb 5
class Polynomial:
    '''A class used to represent a general polynomial, which is a function that both takes and returns real numbers.
    Currently only supports single-variable polynomial functions.
            Polynomials require:
            - coefficients
            - degree
            '''
    def __init__(self, 
                 function_name : str = 'f', # name of function
                 variable_name : str = 'x', # name of variable
                 degree : Union[int, str] = 'n', # degree of polynomial
                 coefficient_name : str ='a' # str for name of coefficients
                 ):
        self.x = variable(variable_name)
        self.starting_index = 0
        self.degree = variable(degree)
        self.sum_index = variable('i')
        self.coefficients = sp.IndexedBase(coefficient_name)
        self.general_sum = sp.Sum(self.coefficients[self.sum_index] * self.x**self.sum_index, (self.sum_index, self.starting_index , self.degree))
        self.function_name = function_name
        self.polynomial = equation(self.function_name, self.x, self.general_sum)

    def __repr__(self):
        if type(self.degree) != int:
            return f'{self.function_name}({self.x}) = {self.coefficients[self.starting_index]} * {self.x}**{self.starting_index} + {self.coefficients[self.starting_index+1]} * {self.x}**{self.starting_index+1} + ... + {self.coefficients[self.degree]} * {self.x}**{self.degree}'
        else:
            return self.polynomial.__repr__()

    
    def right_hand_side(self):
        '''right hand side of the polynomial'''
        return self.general_sum
    
    def equality(self):
        '''Returns the equality of the polynomial'''
        return self.polynomial
    
    def set_degree(self,
                   degree # degree of polynomial, int
                   ):
        '''Sets the degree of the polynomial'''
        self.polynomial = self.polynomial.subs(self.degree, degree).doit()
        self.degree = degree
        return self.polynomial

    def set_coefficients(self,
                         coefficients : list # list of coefficients starting with the lowest indexed coefficient
                         ):
        '''Sets the coefficients of the polynomial'''
        for index, coefficient in enumerate(coefficients):
            self.polynomial = self.polynomial.subs(self.coefficients[index], coefficient).doit()
        return self.polynomial

    def get_output(self,
                     variable_value # value of the variable
                     ):
        '''Sets the variable of the polynomial'''
        return self.polynomial.subs(self.x, variable_value).doit()

# %% ../nbs/01_polynomials.ipynb 16
def polynomial(degree : int, # degree of polynomial
                    coefficients : list # list of coefficients starting with the lowest indexed coefficient
                    ):
    '''Returns a polynomial function with the given degree and coefficients'''
    basic_polynomial = Polynomial()
    basic_polynomial.set_degree(degree)
    basic_polynomial.set_coefficients(coefficients)
    return basic_polynomial

