# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: common_items.proto, test_case.proto, test_case_run_result.proto, statistic.proto, messages.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto


@dataclass
class Inputs(betterproto.Message):
    args: str = betterproto.string_field(1)
    kwargs: str = betterproto.string_field(2)


@dataclass
class ExternalFunction(betterproto.Message):
    full_name: str = betterproto.string_field(1)
    return_value: str = betterproto.string_field(2)
    module_name: str = betterproto.string_field(3)
    raised_exception: str = betterproto.string_field(4)


@dataclass
class TestCase(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    full_name: str = betterproto.string_field(2)
    code_hash: str = betterproto.string_field(3)
    file_path: str = betterproto.string_field(4)
    pre_run_inputs: "Inputs" = betterproto.message_field(5)
    post_run_inputs: "Inputs" = betterproto.message_field(6)
    return_value: str = betterproto.string_field(7)
    raised_exception: str = betterproto.string_field(8)
    external_functions: List["ExternalFunction"] = betterproto.message_field(9)
    globals: str = betterproto.string_field(10)
    function_signature: str = betterproto.string_field(11)
    python_version: str = betterproto.string_field(12)
    collector_version: str = betterproto.string_field(13)
    is_async_function: bool = betterproto.bool_field(14)


@dataclass
class TestCaseRunResult(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    run_id: str = betterproto.string_field(2)
    full_name: str = betterproto.string_field(3)
    file_path: str = betterproto.string_field(4)
    code_hash: str = betterproto.string_field(5)
    workflow_run_id: str = betterproto.string_field(6)
    test_case_id: str = betterproto.string_field(7)
    inputs: "Inputs" = betterproto.message_field(8)
    external_functions: List[str] = betterproto.string_field(9)
    post_run_inputs_before: "Inputs" = betterproto.message_field(10)
    post_run_inputs_after: "Inputs" = betterproto.message_field(11)
    output_before: str = betterproto.string_field(12)
    output_after: str = betterproto.string_field(13)
    pickled_post_run_inputs: "Inputs" = betterproto.message_field(14)
    pickled_return_value: str = betterproto.string_field(15)
    regression_description: str = betterproto.string_field(16)
    did_finish_successfully_before: bool = betterproto.bool_field(17)
    did_finish_successfully_after: bool = betterproto.bool_field(18)
    globals: str = betterproto.string_field(19)
    should_hide: bool = betterproto.bool_field(20)
    pull_request_number: str = betterproto.string_field(21)
    branch_coverage: float = betterproto.float_field(22)


@dataclass
class Statistic(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    value: str = betterproto.string_field(3)
    units: str = betterproto.string_field(4)
    timestamp: int = betterproto.int64_field(5)


@dataclass
class QueueMessage(betterproto.Message):
    test_case: "TestCase" = betterproto.message_field(1, group="data")
    test_case_run_result: "TestCaseRunResult" = betterproto.message_field(
        2, group="data"
    )
    statistic: "Statistic" = betterproto.message_field(3, group="data")


@dataclass
class S3Message(betterproto.Message):
    file_key: str = betterproto.string_field(1)


@dataclass
class MainMessage(betterproto.Message):
    access_token: str = betterproto.string_field(1)
    queue_message: "QueueMessage" = betterproto.message_field(2, group="message")
    s3_message: "S3Message" = betterproto.message_field(3, group="message")
