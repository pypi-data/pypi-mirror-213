# Note: Ths file is generated by the cookiecutter template and modify with poetry commands. It's not neccessary to
# edit it manually (advanced).
# The pyproject.toml file with Poetry: https://python-poetry.org/docs/pyproject/
# Fast Reference: https://py-pkgs.org/03-how-to-package-a-python#summary-and-next-steps

[tool.poetry]
name = "smart_data_science"
version = "0.1.2"
description = "Personal side project to streamline the most common tasks of data science solutions in an efficient manner. This project is based on my experience as a lead data scientist in the industry and financial services sectors, where I have gained expertise in delivering effective data-driven insights and solutions"
authors = ["Angel Martinez-Tenor <angelmtenor@gmail.com>"]
license = "MIT"
readme = "README.md"


[tool.poetry.dependencies]
# Core Packages:  poetry add <package>  (to remove: poetry remove <package>)
# Common issue: In case of incompatibility error after 'poetry add <package>', just set the --python property to the one
# suggested at the end of the error message. e.g.:
# output message: ... a possible solution would be to set the `python` property to ">=3.10,<3.11"
# solution: $ poetry add pandas-profiling --python ">=3.10,<3.11"

python = "^3.10"
pandas = ">=1.5.0"
pyarrow = ">=9.0.0"
pandera = ">=0.13.4"
pandarallel = ">=1.6.3"
py-cpuinfo = ">=9.0.0"
# setuptools = "^65.6.3"
jupyter = ">=1.0.0"
ipython = ">=8.10"
jupyter-contrib-nbextensions = ">=0.7.0"
psutil = ">=5.9.4"
tqdm = ">=4.64.1"
# llvmlite = ">=0.39.0"
# numba = ">=0.56.4"

scikit-learn = { version = ">=1.2.0", optional = true }
lightgbm = { version = ">=3.3.4", optional = true }
xgboost = { version = ">=1.7.3", optional = true }
scikit-optimize = { version = ">=0.9.0", optional = true }
explainerdashboard = { version = ">=0.4.2.1", optional = true }
#flask-simplelogin 0.1.2
flask-simplelogin = { version = ">=0.1.2", optional = true } # requited for explainerdashboard

mapie = { version = ">=0.6.4", optional = true }

shap = { version = ">=0.41.0", optional = true }
plotly = { version = ">=5.10.0", optional = true }
matplotlib = { version = ">=3.6.3", optional = true }
seaborn = { version = ">=0.12.2", optional = true }

pandas-profiling = { version = ">=3.4.0", python = ">=3.10,<3.11", optional = true }
streamlit = { version = ">=1.15.0", python = ">=3.10,<4.0", optional = true }
sentence-transformers = { version = ">=2.2.2", python = ">=3.10,<4.0", optional = true }
# google-cloud-storage = { version = ">=2.6.0", python = ">=3.10,<4.0", optional = true }
# google-cloud-bigquery = { version = ">=3.4.0", python = ">=3.10,<4.0", optional = true }
# networkx = { version = ">=2.8.8", optional = true}
uvicorn = { version = ">=0.20.0", optional = true }

openai = { version = ">=0.27.6", optional = true }
google-cloud-aiplatform = { version = ">=1.25.0", optional = true }

gunicorn = ">=20.1.0"
fastapi = ">=0.93.0"
graphviz = ">=0.20.1"
chart-studio = ">=1.1.0"
ua-parser = ">=0.16.1"
python-dotenv = ">=1.0.0"
langchain = ">=0.0.186"
tabulate = ">=0.9.0"

[tool.poetry.extras]
full = [
    "scikit-learn",
    "lightgbm",
    "shap",
    "flask-simplelogin",
    "explainerdashboard",
    "mapie",
    "plotly",
    "pandas-profiling",
    "streamlit",
    "sentence-transformers",
    "networkx",
    "openai",
    "google-cloud-aiplatform",
    # "google-cloud-storage",
    # "google-cloud-bigquery",
] # poetry install --extras full  ;  pip install utils_tabular_data[full]
ml = [
    "scikit-learn",
    "scikit-optimize",
    "lightgbm",
    "xgboost",
    "shap",
    "explainerdashboard",
    "mapie",
] # poetry install --extras ml  ;  pip install utils_tabular_data[ml]
plot = [
    "matplotlib",
    "seaborn",
    "plotly",
] # poetry install --extras plot  ;  pip install utils_tabular_data[plot]
ui = [
    "streamlit",
] # poetry install --extras ui  ;  pip install utils_tabular_data[ui]
# gcp = [
#     "google-cloud-storage",
#     "google-cloud-bigquery",
# ] # poetry install --extras gcp  ;  pip install utils_tabular_data[gcp]
# Advanced: recommended for large Models only
# Detailed Dependence Groups with Poetry: https://python-poetry.org/docs/managing-dependencies/#dependency-groups
# e.g.: $ poetry add tensorflow --extras "deep_learning" --optional

[tool.poetry.group.dev.dependencies]
# Edition Only Packages:  poetry add <package> --group dev (to remove: poetry remove <package>)
# They won't be on the final package (pip install <my-package>), but will be installed when developing the package

pytest-cov = ">=4.0.0"
pre-commit = ">=2.21.0"
mypy = ">=0.991"
flake8 = ">=6.0.0"
pylint = ">=2.15.10"
isort = ">=5.11.4"
black = ">=22.12.0"
pyupgrade = ">=3.3.1"
snakeviz = ">=2.1.1"
jupyter-contrib-nbextensions = ">=0.5.1"
# types-pyyaml = "^6.0.12.2"
# types-setuptools = "^65.6.0.3"

# Poetry api for building and publishing (do not change)
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
