# coding: utf-8

"""
    Diveplane API

    OpenAPI implementation for interacting with the Diveplane API.   # noqa: E501

    The version of the OpenAPI document: 23.7.1
    Contact: diveplane@diveplane.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from diveplane.openapi.configuration import Configuration


class ReactDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'robust_computation': 'bool',
        'influential_cases': 'bool',
        'influential_cases_familiarity_convictions': 'bool',
        'influential_cases_raw_weights': 'bool',
        'most_similar_cases': 'bool',
        'num_most_similar_cases': 'float',
        'num_most_similar_case_indices': 'float',
        'boundary_cases': 'bool',
        'num_boundary_cases': 'float',
        'boundary_cases_familiarity_convictions': 'bool',
        'feature_residuals': 'bool',
        'feature_mda': 'bool',
        'feature_mda_ex_post': 'bool',
        'feature_contributions': 'bool',
        'case_feature_residuals': 'bool',
        'case_mda': 'bool',
        'case_contributions': 'bool',
        'global_case_feature_residual_convictions': 'bool',
        'local_case_feature_residual_convictions': 'bool',
        'outlying_feature_values': 'bool',
        'categorical_action_probabilities': 'bool',
        'hypothetical_values': 'dict[str, object]',
        'distance_ratio': 'bool',
        'distance_contribution': 'bool',
        'prediction_similarity_conviction': 'bool',
        'prediction_residual_conviction': 'bool',
        'observational_errors': 'bool'
    }

    attribute_map = {
        'robust_computation': 'robust_computation',
        'influential_cases': 'influential_cases',
        'influential_cases_familiarity_convictions': 'influential_cases_familiarity_convictions',
        'influential_cases_raw_weights': 'influential_cases_raw_weights',
        'most_similar_cases': 'most_similar_cases',
        'num_most_similar_cases': 'num_most_similar_cases',
        'num_most_similar_case_indices': 'num_most_similar_case_indices',
        'boundary_cases': 'boundary_cases',
        'num_boundary_cases': 'num_boundary_cases',
        'boundary_cases_familiarity_convictions': 'boundary_cases_familiarity_convictions',
        'feature_residuals': 'feature_residuals',
        'feature_mda': 'feature_mda',
        'feature_mda_ex_post': 'feature_mda_ex_post',
        'feature_contributions': 'feature_contributions',
        'case_feature_residuals': 'case_feature_residuals',
        'case_mda': 'case_mda',
        'case_contributions': 'case_contributions',
        'global_case_feature_residual_convictions': 'global_case_feature_residual_convictions',
        'local_case_feature_residual_convictions': 'local_case_feature_residual_convictions',
        'outlying_feature_values': 'outlying_feature_values',
        'categorical_action_probabilities': 'categorical_action_probabilities',
        'hypothetical_values': 'hypothetical_values',
        'distance_ratio': 'distance_ratio',
        'distance_contribution': 'distance_contribution',
        'prediction_similarity_conviction': 'prediction_similarity_conviction',
        'prediction_residual_conviction': 'prediction_residual_conviction',
        'observational_errors': 'observational_errors'
    }

    nullable_attributes = [
    ]

    discriminator = None

    def __init__(self, robust_computation=None, influential_cases=None, influential_cases_familiarity_convictions=None, influential_cases_raw_weights=None, most_similar_cases=None, num_most_similar_cases=None, num_most_similar_case_indices=None, boundary_cases=None, num_boundary_cases=None, boundary_cases_familiarity_convictions=None, feature_residuals=None, feature_mda=None, feature_mda_ex_post=None, feature_contributions=None, case_feature_residuals=None, case_mda=None, case_contributions=None, global_case_feature_residual_convictions=None, local_case_feature_residual_convictions=None, outlying_feature_values=None, categorical_action_probabilities=None, hypothetical_values=None, distance_ratio=None, distance_contribution=None, prediction_similarity_conviction=None, prediction_residual_conviction=None, observational_errors=None, local_vars_configuration=None):  # noqa: E501
        """ReactDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._robust_computation = None
        self._influential_cases = None
        self._influential_cases_familiarity_convictions = None
        self._influential_cases_raw_weights = None
        self._most_similar_cases = None
        self._num_most_similar_cases = None
        self._num_most_similar_case_indices = None
        self._boundary_cases = None
        self._num_boundary_cases = None
        self._boundary_cases_familiarity_convictions = None
        self._feature_residuals = None
        self._feature_mda = None
        self._feature_mda_ex_post = None
        self._feature_contributions = None
        self._case_feature_residuals = None
        self._case_mda = None
        self._case_contributions = None
        self._global_case_feature_residual_convictions = None
        self._local_case_feature_residual_convictions = None
        self._outlying_feature_values = None
        self._categorical_action_probabilities = None
        self._hypothetical_values = None
        self._distance_ratio = None
        self._distance_contribution = None
        self._prediction_similarity_conviction = None
        self._prediction_residual_conviction = None
        self._observational_errors = None

        if robust_computation is not None:
            self.robust_computation = robust_computation
        if influential_cases is not None:
            self.influential_cases = influential_cases
        if influential_cases_familiarity_convictions is not None:
            self.influential_cases_familiarity_convictions = influential_cases_familiarity_convictions
        if influential_cases_raw_weights is not None:
            self.influential_cases_raw_weights = influential_cases_raw_weights
        if most_similar_cases is not None:
            self.most_similar_cases = most_similar_cases
        if num_most_similar_cases is not None:
            self.num_most_similar_cases = num_most_similar_cases
        if num_most_similar_case_indices is not None:
            self.num_most_similar_case_indices = num_most_similar_case_indices
        if boundary_cases is not None:
            self.boundary_cases = boundary_cases
        if num_boundary_cases is not None:
            self.num_boundary_cases = num_boundary_cases
        if boundary_cases_familiarity_convictions is not None:
            self.boundary_cases_familiarity_convictions = boundary_cases_familiarity_convictions
        if feature_residuals is not None:
            self.feature_residuals = feature_residuals
        if feature_mda is not None:
            self.feature_mda = feature_mda
        if feature_mda_ex_post is not None:
            self.feature_mda_ex_post = feature_mda_ex_post
        if feature_contributions is not None:
            self.feature_contributions = feature_contributions
        if case_feature_residuals is not None:
            self.case_feature_residuals = case_feature_residuals
        if case_mda is not None:
            self.case_mda = case_mda
        if case_contributions is not None:
            self.case_contributions = case_contributions
        if global_case_feature_residual_convictions is not None:
            self.global_case_feature_residual_convictions = global_case_feature_residual_convictions
        if local_case_feature_residual_convictions is not None:
            self.local_case_feature_residual_convictions = local_case_feature_residual_convictions
        if outlying_feature_values is not None:
            self.outlying_feature_values = outlying_feature_values
        if categorical_action_probabilities is not None:
            self.categorical_action_probabilities = categorical_action_probabilities
        if hypothetical_values is not None:
            self.hypothetical_values = hypothetical_values
        if distance_ratio is not None:
            self.distance_ratio = distance_ratio
        if distance_contribution is not None:
            self.distance_contribution = distance_contribution
        if prediction_similarity_conviction is not None:
            self.prediction_similarity_conviction = prediction_similarity_conviction
        if prediction_residual_conviction is not None:
            self.prediction_residual_conviction = prediction_residual_conviction
        if observational_errors is not None:
            self.observational_errors = observational_errors

    @property
    def robust_computation(self):
        """Gets the robust_computation of this ReactDetails.  # noqa: E501

        When true, uses uniform sampling from the power set of all combinations of features (or cases, as needed). Otherwise, uses leave-one-out for features (or cases, as needed) for all relevant computations.   # noqa: E501

        :return: The robust_computation of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._robust_computation

    @robust_computation.setter
    def robust_computation(self, robust_computation):
        """Sets the robust_computation of this ReactDetails.

        When true, uses uniform sampling from the power set of all combinations of features (or cases, as needed). Otherwise, uses leave-one-out for features (or cases, as needed) for all relevant computations.   # noqa: E501

        :param robust_computation: The robust_computation of this ReactDetails.  # noqa: E501
        :type robust_computation: bool
        """

        self._robust_computation = robust_computation

    @property
    def influential_cases(self):
        """Gets the influential_cases of this ReactDetails.  # noqa: E501

        When true, outputs the most influential cases and their influence weights based on the surprisal of each case relative to the context being predicted among the cases. Uses only the context features of the reacted case.   # noqa: E501

        :return: The influential_cases of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._influential_cases

    @influential_cases.setter
    def influential_cases(self, influential_cases):
        """Sets the influential_cases of this ReactDetails.

        When true, outputs the most influential cases and their influence weights based on the surprisal of each case relative to the context being predicted among the cases. Uses only the context features of the reacted case.   # noqa: E501

        :param influential_cases: The influential_cases of this ReactDetails.  # noqa: E501
        :type influential_cases: bool
        """

        self._influential_cases = influential_cases

    @property
    def influential_cases_familiarity_convictions(self):
        """Gets the influential_cases_familiarity_convictions of this ReactDetails.  # noqa: E501

        When true, outputs familiarity conviction of addition for each of the influential cases.  # noqa: E501

        :return: The influential_cases_familiarity_convictions of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._influential_cases_familiarity_convictions

    @influential_cases_familiarity_convictions.setter
    def influential_cases_familiarity_convictions(self, influential_cases_familiarity_convictions):
        """Sets the influential_cases_familiarity_convictions of this ReactDetails.

        When true, outputs familiarity conviction of addition for each of the influential cases.  # noqa: E501

        :param influential_cases_familiarity_convictions: The influential_cases_familiarity_convictions of this ReactDetails.  # noqa: E501
        :type influential_cases_familiarity_convictions: bool
        """

        self._influential_cases_familiarity_convictions = influential_cases_familiarity_convictions

    @property
    def influential_cases_raw_weights(self):
        """Gets the influential_cases_raw_weights of this ReactDetails.  # noqa: E501

        When true, outputs the surprisal for each of the influential cases.   # noqa: E501

        :return: The influential_cases_raw_weights of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._influential_cases_raw_weights

    @influential_cases_raw_weights.setter
    def influential_cases_raw_weights(self, influential_cases_raw_weights):
        """Sets the influential_cases_raw_weights of this ReactDetails.

        When true, outputs the surprisal for each of the influential cases.   # noqa: E501

        :param influential_cases_raw_weights: The influential_cases_raw_weights of this ReactDetails.  # noqa: E501
        :type influential_cases_raw_weights: bool
        """

        self._influential_cases_raw_weights = influential_cases_raw_weights

    @property
    def most_similar_cases(self):
        """Gets the most_similar_cases of this ReactDetails.  # noqa: E501

        When true, outputs an automatically determined (when 'num_most_similar_cases' is not specified) relevant number of similar cases, which will first include the influential cases. Uses only the context features of the reacted case.   # noqa: E501

        :return: The most_similar_cases of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._most_similar_cases

    @most_similar_cases.setter
    def most_similar_cases(self, most_similar_cases):
        """Sets the most_similar_cases of this ReactDetails.

        When true, outputs an automatically determined (when 'num_most_similar_cases' is not specified) relevant number of similar cases, which will first include the influential cases. Uses only the context features of the reacted case.   # noqa: E501

        :param most_similar_cases: The most_similar_cases of this ReactDetails.  # noqa: E501
        :type most_similar_cases: bool
        """

        self._most_similar_cases = most_similar_cases

    @property
    def num_most_similar_cases(self):
        """Gets the num_most_similar_cases of this ReactDetails.  # noqa: E501

        When defined, outputs this manually specified number of most similar cases, which will first include the influential cases. Takes precedence over 'most_similar_cases' parameter.   # noqa: E501

        :return: The num_most_similar_cases of this ReactDetails.  # noqa: E501
        :rtype: float
        """
        return self._num_most_similar_cases

    @num_most_similar_cases.setter
    def num_most_similar_cases(self, num_most_similar_cases):
        """Sets the num_most_similar_cases of this ReactDetails.

        When defined, outputs this manually specified number of most similar cases, which will first include the influential cases. Takes precedence over 'most_similar_cases' parameter.   # noqa: E501

        :param num_most_similar_cases: The num_most_similar_cases of this ReactDetails.  # noqa: E501
        :type num_most_similar_cases: float
        """
        if (self.local_vars_configuration.client_side_validation and
                num_most_similar_cases is not None and num_most_similar_cases > 1000):  # noqa: E501
            raise ValueError("Invalid value for `num_most_similar_cases`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_most_similar_cases is not None and num_most_similar_cases < 1):  # noqa: E501
            raise ValueError("Invalid value for `num_most_similar_cases`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_most_similar_cases = num_most_similar_cases

    @property
    def num_most_similar_case_indices(self):
        """Gets the num_most_similar_case_indices of this ReactDetails.  # noqa: E501

        When defined, outputs the specified number of most similar case indices when 'distance_ratio' is also set to true.   # noqa: E501

        :return: The num_most_similar_case_indices of this ReactDetails.  # noqa: E501
        :rtype: float
        """
        return self._num_most_similar_case_indices

    @num_most_similar_case_indices.setter
    def num_most_similar_case_indices(self, num_most_similar_case_indices):
        """Sets the num_most_similar_case_indices of this ReactDetails.

        When defined, outputs the specified number of most similar case indices when 'distance_ratio' is also set to true.   # noqa: E501

        :param num_most_similar_case_indices: The num_most_similar_case_indices of this ReactDetails.  # noqa: E501
        :type num_most_similar_case_indices: float
        """
        if (self.local_vars_configuration.client_side_validation and
                num_most_similar_case_indices is not None and num_most_similar_case_indices > 1000):  # noqa: E501
            raise ValueError("Invalid value for `num_most_similar_case_indices`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_most_similar_case_indices is not None and num_most_similar_case_indices < 1):  # noqa: E501
            raise ValueError("Invalid value for `num_most_similar_case_indices`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_most_similar_case_indices = num_most_similar_case_indices

    @property
    def boundary_cases(self):
        """Gets the boundary_cases of this ReactDetails.  # noqa: E501

        When true, outputs an automatically determined (when 'num_boundary_cases' is not specified) relevant number of boundary cases. Uses both context and action features of the reacted case to determine the counterfactual boundary based on action features, which maximize the dissimilarity of action features while maximizing the similarity of context features. If action features aren't specified, uses familiarity conviction to determine the boundary instead.   # noqa: E501

        :return: The boundary_cases of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._boundary_cases

    @boundary_cases.setter
    def boundary_cases(self, boundary_cases):
        """Sets the boundary_cases of this ReactDetails.

        When true, outputs an automatically determined (when 'num_boundary_cases' is not specified) relevant number of boundary cases. Uses both context and action features of the reacted case to determine the counterfactual boundary based on action features, which maximize the dissimilarity of action features while maximizing the similarity of context features. If action features aren't specified, uses familiarity conviction to determine the boundary instead.   # noqa: E501

        :param boundary_cases: The boundary_cases of this ReactDetails.  # noqa: E501
        :type boundary_cases: bool
        """

        self._boundary_cases = boundary_cases

    @property
    def num_boundary_cases(self):
        """Gets the num_boundary_cases of this ReactDetails.  # noqa: E501

        When defined, outputs this manually specified number of boundary cases. Takes precedence over 'boundary_cases' parameter.   # noqa: E501

        :return: The num_boundary_cases of this ReactDetails.  # noqa: E501
        :rtype: float
        """
        return self._num_boundary_cases

    @num_boundary_cases.setter
    def num_boundary_cases(self, num_boundary_cases):
        """Sets the num_boundary_cases of this ReactDetails.

        When defined, outputs this manually specified number of boundary cases. Takes precedence over 'boundary_cases' parameter.   # noqa: E501

        :param num_boundary_cases: The num_boundary_cases of this ReactDetails.  # noqa: E501
        :type num_boundary_cases: float
        """
        if (self.local_vars_configuration.client_side_validation and
                num_boundary_cases is not None and num_boundary_cases > 1000):  # noqa: E501
            raise ValueError("Invalid value for `num_boundary_cases`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_boundary_cases is not None and num_boundary_cases < 1):  # noqa: E501
            raise ValueError("Invalid value for `num_boundary_cases`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_boundary_cases = num_boundary_cases

    @property
    def boundary_cases_familiarity_convictions(self):
        """Gets the boundary_cases_familiarity_convictions of this ReactDetails.  # noqa: E501

        When true, outputs familiarity conviction of addition for each of the boundary cases.  # noqa: E501

        :return: The boundary_cases_familiarity_convictions of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._boundary_cases_familiarity_convictions

    @boundary_cases_familiarity_convictions.setter
    def boundary_cases_familiarity_convictions(self, boundary_cases_familiarity_convictions):
        """Sets the boundary_cases_familiarity_convictions of this ReactDetails.

        When true, outputs familiarity conviction of addition for each of the boundary cases.  # noqa: E501

        :param boundary_cases_familiarity_convictions: The boundary_cases_familiarity_convictions of this ReactDetails.  # noqa: E501
        :type boundary_cases_familiarity_convictions: bool
        """

        self._boundary_cases_familiarity_convictions = boundary_cases_familiarity_convictions

    @property
    def feature_residuals(self):
        """Gets the feature_residuals of this ReactDetails.  # noqa: E501

        When true, outputs feature residuals for all (context and action) features locally around the prediction. Uses only the context features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The feature_residuals of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._feature_residuals

    @feature_residuals.setter
    def feature_residuals(self, feature_residuals):
        """Sets the feature_residuals of this ReactDetails.

        When true, outputs feature residuals for all (context and action) features locally around the prediction. Uses only the context features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param feature_residuals: The feature_residuals of this ReactDetails.  # noqa: E501
        :type feature_residuals: bool
        """

        self._feature_residuals = feature_residuals

    @property
    def feature_mda(self):
        """Gets the feature_mda of this ReactDetails.  # noqa: E501

        When true, outputs each context feature's mean decrease in accuracy of predicting the action feature given the context. Uses only the context features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The feature_mda of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._feature_mda

    @feature_mda.setter
    def feature_mda(self, feature_mda):
        """Sets the feature_mda of this ReactDetails.

        When true, outputs each context feature's mean decrease in accuracy of predicting the action feature given the context. Uses only the context features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param feature_mda: The feature_mda of this ReactDetails.  # noqa: E501
        :type feature_mda: bool
        """

        self._feature_mda = feature_mda

    @property
    def feature_mda_ex_post(self):
        """Gets the feature_mda_ex_post of this ReactDetails.  # noqa: E501

        When true, outputs each context feature's mean decrease in accuracy of predicting the action feature as an explanation given that the specified prediction was already made as specified by the action value. Uses both context and action features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The feature_mda_ex_post of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._feature_mda_ex_post

    @feature_mda_ex_post.setter
    def feature_mda_ex_post(self, feature_mda_ex_post):
        """Sets the feature_mda_ex_post of this ReactDetails.

        When true, outputs each context feature's mean decrease in accuracy of predicting the action feature as an explanation given that the specified prediction was already made as specified by the action value. Uses both context and action features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param feature_mda_ex_post: The feature_mda_ex_post of this ReactDetails.  # noqa: E501
        :type feature_mda_ex_post: bool
        """

        self._feature_mda_ex_post = feature_mda_ex_post

    @property
    def feature_contributions(self):
        """Gets the feature_contributions of this ReactDetails.  # noqa: E501

        When true, outputs each context feature's differences between the predicted action feature value and the predicted action feature value if each context were not in the model for all context features in the local model area. Relies 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The feature_contributions of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._feature_contributions

    @feature_contributions.setter
    def feature_contributions(self, feature_contributions):
        """Sets the feature_contributions of this ReactDetails.

        When true, outputs each context feature's differences between the predicted action feature value and the predicted action feature value if each context were not in the model for all context features in the local model area. Relies 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param feature_contributions: The feature_contributions of this ReactDetails.  # noqa: E501
        :type feature_contributions: bool
        """

        self._feature_contributions = feature_contributions

    @property
    def case_feature_residuals(self):
        """Gets the case_feature_residuals of this ReactDetails.  # noqa: E501

        When true, outputs feature residuals for all (context and action) features for just the specified case. Uses leave-one-out for each feature, while using the others to predict the left out feature with their corresponding values from this case. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The case_feature_residuals of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._case_feature_residuals

    @case_feature_residuals.setter
    def case_feature_residuals(self, case_feature_residuals):
        """Sets the case_feature_residuals of this ReactDetails.

        When true, outputs feature residuals for all (context and action) features for just the specified case. Uses leave-one-out for each feature, while using the others to predict the left out feature with their corresponding values from this case. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param case_feature_residuals: The case_feature_residuals of this ReactDetails.  # noqa: E501
        :type case_feature_residuals: bool
        """

        self._case_feature_residuals = case_feature_residuals

    @property
    def case_mda(self):
        """Gets the case_mda of this ReactDetails.  # noqa: E501

        When true, outputs each influential case's mean decrease in accuracy of predicting the action feature in the local model area, as if each individual case were included versus not included. Uses only the context features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The case_mda of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._case_mda

    @case_mda.setter
    def case_mda(self, case_mda):
        """Sets the case_mda of this ReactDetails.

        When true, outputs each influential case's mean decrease in accuracy of predicting the action feature in the local model area, as if each individual case were included versus not included. Uses only the context features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param case_mda: The case_mda of this ReactDetails.  # noqa: E501
        :type case_mda: bool
        """

        self._case_mda = case_mda

    @property
    def case_contributions(self):
        """Gets the case_contributions of this ReactDetails.  # noqa: E501

        When true, outputs each influential case's differences between the predicted action feature value and the predicted action feature value if each individual case were not included. Uses only the context features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The case_contributions of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._case_contributions

    @case_contributions.setter
    def case_contributions(self, case_contributions):
        """Sets the case_contributions of this ReactDetails.

        When true, outputs each influential case's differences between the predicted action feature value and the predicted action feature value if each individual case were not included. Uses only the context features of the reacted case to determine that area. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param case_contributions: The case_contributions of this ReactDetails.  # noqa: E501
        :type case_contributions: bool
        """

        self._case_contributions = case_contributions

    @property
    def global_case_feature_residual_convictions(self):
        """Gets the global_case_feature_residual_convictions of this ReactDetails.  # noqa: E501

        When true, outputs this case's feature residual convictions for the global model. Computed as: global model feature residual divided by case feature residual. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The global_case_feature_residual_convictions of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._global_case_feature_residual_convictions

    @global_case_feature_residual_convictions.setter
    def global_case_feature_residual_convictions(self, global_case_feature_residual_convictions):
        """Sets the global_case_feature_residual_convictions of this ReactDetails.

        When true, outputs this case's feature residual convictions for the global model. Computed as: global model feature residual divided by case feature residual. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param global_case_feature_residual_convictions: The global_case_feature_residual_convictions of this ReactDetails.  # noqa: E501
        :type global_case_feature_residual_convictions: bool
        """

        self._global_case_feature_residual_convictions = global_case_feature_residual_convictions

    @property
    def local_case_feature_residual_convictions(self):
        """Gets the local_case_feature_residual_convictions of this ReactDetails.  # noqa: E501

        When true, outputs this case's feature residual convictions for the region around the prediction. Uses only the context features of the reacted case to determine that region. Computed as: region feature residual divided by case feature residual. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :return: The local_case_feature_residual_convictions of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._local_case_feature_residual_convictions

    @local_case_feature_residual_convictions.setter
    def local_case_feature_residual_convictions(self, local_case_feature_residual_convictions):
        """Sets the local_case_feature_residual_convictions of this ReactDetails.

        When true, outputs this case's feature residual convictions for the region around the prediction. Uses only the context features of the reacted case to determine that region. Computed as: region feature residual divided by case feature residual. Relies on 'robust_computation' parameter to determine whether to do standard or robust computation.   # noqa: E501

        :param local_case_feature_residual_convictions: The local_case_feature_residual_convictions of this ReactDetails.  # noqa: E501
        :type local_case_feature_residual_convictions: bool
        """

        self._local_case_feature_residual_convictions = local_case_feature_residual_convictions

    @property
    def outlying_feature_values(self):
        """Gets the outlying_feature_values of this ReactDetails.  # noqa: E501

        When true, outputs the reacted case's context feature values that are outside the min or max of the corresponding feature values of all the cases in the local model area. Uses only the context features of the reacted case to determine that area.   # noqa: E501

        :return: The outlying_feature_values of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._outlying_feature_values

    @outlying_feature_values.setter
    def outlying_feature_values(self, outlying_feature_values):
        """Sets the outlying_feature_values of this ReactDetails.

        When true, outputs the reacted case's context feature values that are outside the min or max of the corresponding feature values of all the cases in the local model area. Uses only the context features of the reacted case to determine that area.   # noqa: E501

        :param outlying_feature_values: The outlying_feature_values of this ReactDetails.  # noqa: E501
        :type outlying_feature_values: bool
        """

        self._outlying_feature_values = outlying_feature_values

    @property
    def categorical_action_probabilities(self):
        """Gets the categorical_action_probabilities of this ReactDetails.  # noqa: E501

        When true, outputs probabilities for each class for the action. Applicable only to categorical action features.   # noqa: E501

        :return: The categorical_action_probabilities of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._categorical_action_probabilities

    @categorical_action_probabilities.setter
    def categorical_action_probabilities(self, categorical_action_probabilities):
        """Sets the categorical_action_probabilities of this ReactDetails.

        When true, outputs probabilities for each class for the action. Applicable only to categorical action features.   # noqa: E501

        :param categorical_action_probabilities: The categorical_action_probabilities of this ReactDetails.  # noqa: E501
        :type categorical_action_probabilities: bool
        """

        self._categorical_action_probabilities = categorical_action_probabilities

    @property
    def hypothetical_values(self):
        """Gets the hypothetical_values of this ReactDetails.  # noqa: E501

        A dictionary of feature name to feature value. If specified, shows how a prediction could change in a what-if scenario where the influential cases' context feature values are replaced with the specified values. Iterates over all influential cases, predicting the action features each one using the updated hypothetical values. Outputs the predicted arithmetic over the influential cases for each action feature.   # noqa: E501

        :return: The hypothetical_values of this ReactDetails.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._hypothetical_values

    @hypothetical_values.setter
    def hypothetical_values(self, hypothetical_values):
        """Sets the hypothetical_values of this ReactDetails.

        A dictionary of feature name to feature value. If specified, shows how a prediction could change in a what-if scenario where the influential cases' context feature values are replaced with the specified values. Iterates over all influential cases, predicting the action features each one using the updated hypothetical values. Outputs the predicted arithmetic over the influential cases for each action feature.   # noqa: E501

        :param hypothetical_values: The hypothetical_values of this ReactDetails.  # noqa: E501
        :type hypothetical_values: dict[str, object]
        """

        self._hypothetical_values = hypothetical_values

    @property
    def distance_ratio(self):
        """Gets the distance_ratio of this ReactDetails.  # noqa: E501

        When true, outputs the ratio of distance (relative surprisal) between this reacted case and its nearest case to the minimum distance (relative surprisal) in between the closest two cases in the local area. All distances are computed using only the specified context features.   # noqa: E501

        :return: The distance_ratio of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._distance_ratio

    @distance_ratio.setter
    def distance_ratio(self, distance_ratio):
        """Sets the distance_ratio of this ReactDetails.

        When true, outputs the ratio of distance (relative surprisal) between this reacted case and its nearest case to the minimum distance (relative surprisal) in between the closest two cases in the local area. All distances are computed using only the specified context features.   # noqa: E501

        :param distance_ratio: The distance_ratio of this ReactDetails.  # noqa: E501
        :type distance_ratio: bool
        """

        self._distance_ratio = distance_ratio

    @property
    def distance_contribution(self):
        """Gets the distance_contribution of this ReactDetails.  # noqa: E501

        When true, outputs the distance contribution (expected total surprisal contribution) for the reacted case. Uses both context and action feature values.   # noqa: E501

        :return: The distance_contribution of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._distance_contribution

    @distance_contribution.setter
    def distance_contribution(self, distance_contribution):
        """Sets the distance_contribution of this ReactDetails.

        When true, outputs the distance contribution (expected total surprisal contribution) for the reacted case. Uses both context and action feature values.   # noqa: E501

        :param distance_contribution: The distance_contribution of this ReactDetails.  # noqa: E501
        :type distance_contribution: bool
        """

        self._distance_contribution = distance_contribution

    @property
    def prediction_similarity_conviction(self):
        """Gets the prediction_similarity_conviction of this ReactDetails.  # noqa: E501

        When true, outputs similarity conviction for the reacted case. Uses both context and action feature values as the case values for all computations. This is defined as expected (global) distance contribution divided by reacted case distance contribution.   # noqa: E501

        :return: The prediction_similarity_conviction of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._prediction_similarity_conviction

    @prediction_similarity_conviction.setter
    def prediction_similarity_conviction(self, prediction_similarity_conviction):
        """Sets the prediction_similarity_conviction of this ReactDetails.

        When true, outputs similarity conviction for the reacted case. Uses both context and action feature values as the case values for all computations. This is defined as expected (global) distance contribution divided by reacted case distance contribution.   # noqa: E501

        :param prediction_similarity_conviction: The prediction_similarity_conviction of this ReactDetails.  # noqa: E501
        :type prediction_similarity_conviction: bool
        """

        self._prediction_similarity_conviction = prediction_similarity_conviction

    @property
    def prediction_residual_conviction(self):
        """Gets the prediction_residual_conviction of this ReactDetails.  # noqa: E501

        When true, outputs residual conviction for the reacted case's action features by computing the prediction residual for the action features in the local model area. Uses both context and action features to determine that area. This is defined as the expected (global) model residual divided by computed local residual.   # noqa: E501

        :return: The prediction_residual_conviction of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._prediction_residual_conviction

    @prediction_residual_conviction.setter
    def prediction_residual_conviction(self, prediction_residual_conviction):
        """Sets the prediction_residual_conviction of this ReactDetails.

        When true, outputs residual conviction for the reacted case's action features by computing the prediction residual for the action features in the local model area. Uses both context and action features to determine that area. This is defined as the expected (global) model residual divided by computed local residual.   # noqa: E501

        :param prediction_residual_conviction: The prediction_residual_conviction of this ReactDetails.  # noqa: E501
        :type prediction_residual_conviction: bool
        """

        self._prediction_residual_conviction = prediction_residual_conviction

    @property
    def observational_errors(self):
        """Gets the observational_errors of this ReactDetails.  # noqa: E501

        When true, outputs observational errors for all features as defined in feature attributes.   # noqa: E501

        :return: The observational_errors of this ReactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._observational_errors

    @observational_errors.setter
    def observational_errors(self, observational_errors):
        """Sets the observational_errors of this ReactDetails.

        When true, outputs observational errors for all features as defined in feature attributes.   # noqa: E501

        :param observational_errors: The observational_errors of this ReactDetails.  # noqa: E501
        :type observational_errors: bool
        """

        self._observational_errors = observational_errors

    def to_dict(self, serialize=False, exclude_null=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif 'exclude_null' in args:
                    return x.to_dict(serialize, exclude_null)
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            elif value is None and (exclude_null or attr not in self.nullable_attributes):
                continue
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReactDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReactDetails):
            return True

        return self.to_dict() != other.to_dict()
