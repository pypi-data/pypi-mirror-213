<htsl>

<head>
  <title>Nodezator Manual | Defining viewer nodes</title>
</head>

<body>

<p><a href="index.htsl">Table of contents</a> &gt; Defining viewer nodes</p>

<h1>Defining viewer nodes</h1>

<p>Of course, we could just print the output of our get_circle node from the previous chapter using an app-defined node representing the print() built-in function. However, since we may find ourselves working with more complex data as we further develop our nodes and node layouts, being able to define our own viewer nodes will come in handy.</p>

<p>Let's create another folder inside points2d called <i>viewer</i> wherein we'll store nodes responsible for viewing points. This is just another <b>category folder</b>, just like point_creation.</p>

<p>Before we delve into the full implementation of our viewer node, I present below a first draft of the function that will generate our viewer node.</p>

<python>
### viewer node first draft

### function definition

def view_points(points):
    ...

### function aliasing as 'main_callable'
main_callable = view_points
</python>

<p>As you can see, our viewer node is just a regular node like any other. It has a single parameter where we'll receive the given points to display them on the screen. It is also aliased as <i>main_callable</i> like any other node, so that Nodezator can fetch it and turn it into a node.</p>

<p>The difference from other nodes, however, is that instead of just processing the input and returning the output, our viewer node will <b>define and run its own loop</b> until the user decides to exit the visualization.</p>

<p>Before we delve into the full code still, I'd like to make yet a small addition, a single line at the end that will make our node even more useful. That is, setting our callable's <i>dismiss_exec_time_tracking</i> to True. Here's how we'd do:</p>

<python>
### viewer node second draft

### function definition

def view_points(points):
    ...

### setting view_point's dismiss_exec_time_tracking
### attribute to True
view_points.dismiss_exec_time_tracking = True

### function aliasing as 'main_callable'
main_callable = view_points
</python>

<p>The consequence of this small change is just what the name suggests: the <b>execution time of the node won't be tracked</b>. All nodes, by default, have their execution time tracked. The total time taken to execute a node layout is calculated as the sum of the execution time of all nodes and displayed in the Nodezator's status bar.</p>

<p>However, time spent in a viewer node is irrelevant because it doesn't measure the efficiency of the node, just how much time the user decides to spend within the viewer node loop. The user may choose to spend a few seconds or several minutes examining the visualization shown by the node during its loop and that says nothing about its efficiency.</p>

<p>By dismissing execution time tracking in viewer nodes we keep our total execution time relevant. Dismissing execution time tracking in viewer nodes is <b>not needed, but highly recommended</b> for the reason we just discussed.</p>

<p>The only thing our viewer node needs now is to implement its own loop. This is actually pretty simple because Nodezator uses <a href="https://pygame.org">pygame</a> as its GUI and pygame either exposes all needed objects to define and run our own loop or at least provides ways to create such objects.</p>

<p>So, in other words, we'll just <b>create a pygame loop</b> like any other. This has nothing to do with Nodezator, we use pure pygame API. Here's the full code, extensively commented:</p>

<python>
### full viewer node source
### points2d/viewer/view_points/__main__.py file

### standard library import
from collections import deque


### third-party imports

from pygame import (

              QUIT,
              KEYUP, K_ESCAPE,

              Surface,

            )

from pygame.display import get_surface, update

from pygame.event import get as get_events

from pygame.time import Clock

from pygame.draw import circle as draw_circle

from pygame.math import Vector2


### setup code: creation/reference of objects to be reused
### by the node as needed

## reference existing screen instance
SCREEN = get_surface()

## create a background filled with grey

background = Surface(SCREEN.get_size()).convert()
background.fill('grey')

## create a clock and reference its tick() method which
## will be used to maintain a steady framerate
maintain_fps = Clock().tick

## callable to offset points to center of the screen;
##
## this is needed because points are generated from the
## origin of the 2d space, which is the topleft corner
## of the screen, but we want them to appear near the
## center
move_to_center = Vector2(SCREEN.get_rect().center).__add__

## define colors

RED  = (255, 0,   0)
BLUE = (  0, 0, 255)


### below we define the function to be turned into our
### viewer node

def view_points(points):

    ### create a special collection with the points
    ### moved to the center

    points_deque = deque(

                     move_to_center(point)

                     for point in points

                   )

    ### shift the points one position to the right;
    ###
    ### from now on the points will be continually shifted
    ### to the left one position each loop; we shift them
    ### here to the right only this once, so that the first
    ### time they are shifted to the left they assume the
    ### original order;
    points_deque.rotate(1)

    ### blit the background on the screen to clean it;
    ###
    ### we only need to this once in this case, because
    ### the points don't actually move, only their colors
    ### are changed to give the illusion of movement,
    ### so we only need to clean the screen this time;
    SCREEN.blit(background, (0, 0))

    ### create a variable indicating to keep running the
    ### loop
    running = True

    ### run the loop

    while running:
        
        ### ensure framerate is kept at 60 fps
        maintain_fps(60)
        
        ### handle inputs

        for event in get_events():

            ## if user tries to close the window
            ## or presses the escape key we set the
            ## 'running' variable to False, therefore
            ## causing the loop to be exited

            if (

               event.type == QUIT

               or (
                     event.type == KEYUP
                 and event.key  == K_ESCAPE
               )

            ):
                running = False

        ### shift points one position to the left
        points_deque.rotate(-1)

        ### draw objects

        ## points

        # draw all points with blue

        for point in points_deque:

            draw_circle(
              SCREEN,
              BLUE,
              point,
              3,
            )

        # then only the first point with red

        draw_circle(
          SCREEN,
          RED,
          points_deque[0],
          3,
        )

        ### update the screen (pygame.display.update)
        update()


### setting view_point's dismiss_exec_time_tracking
### attribute to True
view_points.dismiss_exec_time_tracking = True

### finally, alias our function as the 'main_callable'
main_callable = view_points
</python>

<img src="images/ch-defining-viewer-nodes_img00.png" alt="Node generated from the function" />

<p>That's it! At this point, you should be able to test the node pack you created with your get_circle and view_points nodes. Also, don't forget to check the next two chapters, where I present other important ways of defining nodes, like defining nodes with more than one output.</p>


<p><a href="ch-defining-your-first-node.htsl">Previous chapter</a> |  <a href="index.htsl">Table of contents</a> | <a href="ch-defining-complex-viewer-nodes.htsl">Next chapter</a></p>

</body>

</htsl>
