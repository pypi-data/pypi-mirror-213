# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...invoice.types.currency_code import CurrencyCode
from .bank_account_response import BankAccountResponse
from .card_response import CardResponse
from .check_response import CheckResponse
from .custom_payment_method_response import CustomPaymentMethodResponse
from .payment_method_id import PaymentMethodId
from .payment_method_type import PaymentMethodType


class PaymentMethodResponse(pydantic.BaseModel):
    id: PaymentMethodId
    type: PaymentMethodType
    bank_account: typing.Optional[BankAccountResponse] = pydantic.Field(alias="bankAccount")
    check: typing.Optional[CheckResponse]
    card: typing.Optional[CardResponse]
    custom: typing.Optional[CustomPaymentMethodResponse]
    supported_currencies: typing.List[CurrencyCode] = pydantic.Field(alias="supportedCurrencies")
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
