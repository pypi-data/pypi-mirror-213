environment:
  LINUX_IMAGE: &linux_image Ubuntu2004
  MACOS_IMAGE: &macos_image macos-catalina
  WINDOWS_IMAGE: &windows_image Visual Studio 2022
  LIBZEN_VERSION: 0.4.39
  MEDIAINFO_VERSION: 22.09
  UBUNTU_VERSION: 20.04
  QA_PYTHON_VERSION: 3.11
  # AppVeyor doesn't offer Python 3.11 on macOS yet
  # https://github.com/appveyor/ci/issues/3858
  DEPLOY_TOXENV: py310
  PYPY_URL: https://downloads.python.org/pypy/pypy3.9-v7.3.9-linux64.tar.bz2
  # Work around https://github.com/tox-dev/tox/issues/1550
  PYTHONIOENCODING: utf-8
  TOX_PARALLEL_NO_SPINNER: 1
  TWINE_USERNAME: "__token__"
  TWINE_PASSWORD:
    secure: BkFIG6SMEK/x83DrXFnpP+twYP2IckLTwjUepXbaqz7uVAE6RlOCj9v/E2eVKGZ1TIt6dUldqr3NJMtDTZhjQLMVRqEGsQI/5yqsXIlDjP9HYerhx+m4S7Ub+LfZcMSOoMVJAGI1vbYm4ja+PCQ3pZCQyHaSbDVGj6SbTpoCKBZDHIRHmaCc6aMU8pW2t8EQVFp4VxBBvY7BGbdYBadCdDnlo1n2UNj0fEz+LvOI/to1pHXx3gUqbSsvXCpq4gtS
  matrix:
    - TOXENV: docs,black,flake8,isort,mypy,pylint
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py39
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py310
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py311
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py39
      APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
    - TOXENV: py310
      APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
    - TOXENV: py311
      APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
    - TOXENV: py39
      PYTHON: "C:/Python39"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py39
      PYTHON: "C:/Python39-x64"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py310
      PYTHON: "C:/Python310"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py310
      PYTHON: "C:/Python310-x64"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py311
      PYTHON: "C:/Python311"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py311
      PYTHON: "C:/Python311-x64"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
for:
-
  matrix:
    only:
    - APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
  install:
    - "SET PATH=%PYTHON%;%PYTHON%/Scripts;%PATH%"
    - "python --version"
    - "IF %PYTHON:~-4% == -x64 (SET ARCH=x64) ELSE (SET ARCH=i386)"
    - ps: "Start-FileDownload https://mediaarea.net/download/binary/mediainfo/${Env:MEDIAINFO_VERSION}/MediaInfo_CLI_${Env:MEDIAINFO_VERSION}_Windows_${Env:ARCH}.zip"
    - ps: "unzip -o MediaInfo_CLI_${Env:MEDIAINFO_VERSION}_Windows_${Env:ARCH}.zip LIBCURL.DLL"
    - ps: "Start-FileDownload https://mediaarea.net/download/binary/libmediainfo0/${Env:MEDIAINFO_VERSION}/MediaInfo_DLL_${Env:MEDIAINFO_VERSION}_Windows_${Env:ARCH}_WithoutInstaller.7z"
    - ps: "7z -y x MediaInfo_DLL_${Env:MEDIAINFO_VERSION}_Windows_${Env:ARCH}_WithoutInstaller.7z MediaInfo.dll Developers/License.html"
    # Required for tests to pass with tox, Windows looks for DLLs in PATH
    - ps: "Copy-Item -Path MediaInfo.dll -Destination ${Env:PYTHON}"
    - "move MediaInfo.dll pymediainfo"
    - "move Developers\\License.html docs"
    - "pip install tox"
  build: off
  test_script:
    - "tox"
  deploy_script:
    - ps: |
        If (($env:APPVEYOR_REPO_TAG -eq "true") -and ($env:TOXENV -eq $env:DEPLOY_TOXENV)) {
          pip install twine wheel
          python setup.py bdist_wheel
          Invoke-Expression "twine upload --skip-existing dist/*.whl"
        }
-
  matrix:
    only:
      - APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
  install: |
    set -eo pipefail
    PYTHON_VERSION="$(sed -E 's/^py(3)(.*)$/\1.\2/' <<< "$TOXENV")"
    source "${HOME}/venv${PYTHON_VERSION}/bin/activate"
    pip install tox
    curl https://mediaarea.net/download/binary/libmediainfo0/${MEDIAINFO_VERSION}/MediaInfo_DLL_${MEDIAINFO_VERSION}_Mac_x86_64+arm64.tar.bz2 \
      | tar xj MediaInfoLib/libmediainfo.0.dylib MediaInfoLib/License.html
    # Required for tests to pass with tox
    cp MediaInfoLib/libmediainfo.0.dylib /usr/local/lib/
  build: off
  test_script:
    - "tox"
  deploy_script: |
    set -eo pipefail
    if [[ $APPVEYOR_REPO_TAG == "true" && $TOXENV == $DEPLOY_TOXENV ]]; then
      mv MediaInfoLib/libmediainfo.0.dylib pymediainfo
      mv MediaInfoLib/License.html docs
      pip install twine wheel
      python setup.py bdist_wheel
      twine upload --skip-existing dist/*.whl
    fi
-
  matrix:
    only:
      - APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
  install: |
    set -eo pipefail
    if [[ $TOXENV =~ doc.* ]]; then
      source "${HOME}/venv${QA_PYTHON_VERSION}/bin/activate"
      pip install tox
    else
      if [[ $TOXENV == pypy3 ]]; then
        pushd /tmp
        curl -sS "$PYPY_URL" | tar xj
        PATH="$(pwd)/pypy3.9-v7.3.9-linux64/bin/:$PATH"
        python -m ensurepip
        popd
      else
        PYTHON_VERSION="$(sed -E 's/^py(3)(.*)$/\1.\2/' <<< "$TOXENV")"
        source "${HOME}/venv${PYTHON_VERSION}/bin/activate"
      fi
      # "python -m pip" will work with the unpacked PyPy too, "pip" won't
      python -m pip install tox
      
      pushd /tmp
        curl https://mediaarea.net/download/binary/libmediainfo0/${MEDIAINFO_VERSION}/MediaInfo_DLL_${MEDIAINFO_VERSION}_Lambda_x86_64.zip -o mediainfo.zip
        unzip mediainfo.zip
      popd
    
      cp /tmp/lib/libmediainfo.so.0.0.0 ./pymediainfo/libmediainfo.so.0
      cp /tmp/LICENSE docs/LICENSE
    fi
  build: off
  test_script: |
    if [[ $TOXENV =~ doc.* ]]; then
      tox -p
    else
      # We want to see the progression of the tests so we can't run
      # tox environments in parallel
      tox
    fi
  deploy_script: |
    set -eo pipefail
    if [[ $APPVEYOR_REPO_TAG == "true" && $TOXENV == $DEPLOY_TOXENV ]]; then
      pip install twine wheel auditwheel patchelf
      python setup.py sdist bdist_wheel
    
      auditwheel show dist/*.whl
      auditwheel repair --plat manylinux_2_17_x86_64 dist/*.whl
    
      twine upload --skip-existing wheelhouse/*.whl
      twine upload --skip-existing dist/*.gz
    fi
