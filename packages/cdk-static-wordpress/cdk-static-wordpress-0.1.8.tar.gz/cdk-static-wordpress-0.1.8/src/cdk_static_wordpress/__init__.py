'''
# CDK Static Wordpress

The goal of this project is to make it easy to deploy a static website, generated by [Wordpress](https://wordpress.org/)
as simple and cost-effective as possible.

It's largely inspired by
[TechToSpeech/terraform-aws-serverless-static-wordpress](https://github.com/TechToSpeech/terraform-aws-serverless-static-wordpress/),
but uses [AWS CDK](https://aws.amazon.com/cdk/) instead of Terraform.

It creates the infrastructure to launch a temporary, transient Wordpress container. You then log in and customize it
like any Wordpress site, and finally publish it as a static site fronted by a global CloudFront CDN and S3 Origin. When
youâ€™re done you shut down the Wordpress container and it costs you almost nothing.

[WP2Static](https://wp2static.com/) is used to generate the static site from the Wordpress container.

## Quick Start

1. Install the construct:

   ```bash
   yarn add @blimmer/cdk-static-wordpress

   # or

   npm i --save @blimmer/cdk-static-wordpress
   ```
2. Instantiate a `StaticWordpress` instance a `Stack`:

   ```python
   import { StaticWordpress } from "@blimmer/cdk-static-wordpress";
   import { Stack, StackProps } from "aws-cdk-lib";
   import { HostedZone } from "aws-cdk-lib/aws-route53";
   import { Construct } from "constructs";

   export class StaticWordpressStack extends Stack {
     constructor(scope: Construct, id: string, props?: StackProps) {
       super(scope, id, props);

       // You can create or import a hosted zone
       // See https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_route53.HostedZone.html
       const exampleHostedZone = new HostedZone(this, "ExampleHostedZone", {
         zoneName: "example.com",
       });
       new StaticWordpress(this, "StaticWordpress", {
         fullyQualifiedSiteName: "blog.example.com",
         hostedZone: exampleHostedZone,
         wordpressAdminProps: {
           email: "me@example.com",
         },
       });
     }
   }
   ```
3. Deploy with the [`cdk deploy` command](https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-deploy)
4. Once the deployment completes, visit the Wordpress console at `admin-<fullyQualifiedSiteName>`. E.g., if your static
   site is `blog.example.com`, visit `admin-blog.example.com/wp-admin`.
5. Customize Wordpress as you see fit, create posts, etc.
6. When you're ready to deploy your static site, trigger WP2Static.

   ![](https://github.com/blimmer/cdk-static-wordpress/assets/630449/598ecdd4-ffb6-4381-bd0e-50564622f3c3)
7. Visit your static site (e.g., `blog.example.com`) once WP2Static completes.
8. (optional) Shut down the Wordpress container to save money.

   ```python
   new StaticWordpress(this, "StaticWordpress", {
     fullyQualifiedSiteName: "blog.example.com",
     hostedZone: exampleHostedZone,
     wordpressAdminProps: {
       email: "me@example.com",
       run: false, // <-- Shut down the container after deployment
     },
   });
   ```

## Architecture

TODO
'''
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from typeguard import check_type

from ._jsii import *

import aws_cdk.aws_cloudfront as _aws_cdk_aws_cloudfront_ceddda9d
import aws_cdk.aws_ec2 as _aws_cdk_aws_ec2_ceddda9d
import aws_cdk.aws_ecr_assets as _aws_cdk_aws_ecr_assets_ceddda9d
import aws_cdk.aws_ecs as _aws_cdk_aws_ecs_ceddda9d
import aws_cdk.aws_efs as _aws_cdk_aws_efs_ceddda9d
import aws_cdk.aws_rds as _aws_cdk_aws_rds_ceddda9d
import aws_cdk.aws_route53 as _aws_cdk_aws_route53_ceddda9d
import aws_cdk.aws_s3 as _aws_cdk_aws_s3_ceddda9d
import constructs as _constructs_77d1e7e8


@jsii.data_type(
    jsii_type="@blimmer/cdk-static-wordpress.CloudFrontDistributionConfig",
    jsii_struct_bases=[],
    name_mapping={
        "function_associations": "functionAssociations",
        "price_class": "priceClass",
    },
)
class CloudFrontDistributionConfig:
    def __init__(
        self,
        *,
        function_associations: typing.Optional[typing.Sequence[typing.Union[_aws_cdk_aws_cloudfront_ceddda9d.FunctionAssociation, typing.Dict[builtins.str, typing.Any]]]] = None,
        price_class: typing.Optional[_aws_cdk_aws_cloudfront_ceddda9d.PriceClass] = None,
    ) -> None:
        '''
        :param function_associations: WARNING: you should not probably not use this property. The author is using this for an advanced workaround on one of his sites.
        :param price_class: The PriceClass to use for the CloudFront distribution. See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html Default: - PriceClass.PRICE_CLASS_ALL
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__847b4264bbac4e16ebc001d7da4cdd60ea9b319b7096a9e740e6e34ba1248757)
            check_type(argname="argument function_associations", value=function_associations, expected_type=type_hints["function_associations"])
            check_type(argname="argument price_class", value=price_class, expected_type=type_hints["price_class"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if function_associations is not None:
            self._values["function_associations"] = function_associations
        if price_class is not None:
            self._values["price_class"] = price_class

    @builtins.property
    def function_associations(
        self,
    ) -> typing.Optional[typing.List[_aws_cdk_aws_cloudfront_ceddda9d.FunctionAssociation]]:
        '''WARNING: you should not probably not use this property.

        The author is using this for an advanced workaround
        on one of his sites.
        '''
        result = self._values.get("function_associations")
        return typing.cast(typing.Optional[typing.List[_aws_cdk_aws_cloudfront_ceddda9d.FunctionAssociation]], result)

    @builtins.property
    def price_class(
        self,
    ) -> typing.Optional[_aws_cdk_aws_cloudfront_ceddda9d.PriceClass]:
        '''The PriceClass to use for the CloudFront distribution.

        See
        https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html

        :default: - PriceClass.PRICE_CLASS_ALL
        '''
        result = self._values.get("price_class")
        return typing.cast(typing.Optional[_aws_cdk_aws_cloudfront_ceddda9d.PriceClass], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "CloudFrontDistributionConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class EcsTask(
    _constructs_77d1e7e8.Construct,
    metaclass=jsii.JSIIMeta,
    jsii_type="@blimmer/cdk-static-wordpress.EcsTask",
):
    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id: builtins.str,
        *,
        fully_qualified_site_name: builtins.str,
        hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
        site_id: builtins.str,
        static_hosting: "StaticHosting",
        wordpress_admin_props: typing.Union["WordpressAdminProps", typing.Dict[builtins.str, typing.Any]],
        wordpress_docker_image: "WordpressDockerImage",
        ecs_cluster: typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster] = None,
        vpc: typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc] = None,
        wordpress_database_props: typing.Optional[typing.Union["WordpressDatabaseProps", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param scope: -
        :param id: -
        :param fully_qualified_site_name: 
        :param hosted_zone: 
        :param site_id: 
        :param static_hosting: 
        :param wordpress_admin_props: 
        :param wordpress_docker_image: 
        :param ecs_cluster: 
        :param vpc: 
        :param wordpress_database_props: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__336da97d57a79070aa7f01c569cdd1ba666ad56b7ceab5361342aeaa58a2436d)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        props = EcsTaskProps(
            fully_qualified_site_name=fully_qualified_site_name,
            hosted_zone=hosted_zone,
            site_id=site_id,
            static_hosting=static_hosting,
            wordpress_admin_props=wordpress_admin_props,
            wordpress_docker_image=wordpress_docker_image,
            ecs_cluster=ecs_cluster,
            vpc=vpc,
            wordpress_database_props=wordpress_database_props,
        )

        jsii.create(self.__class__, self, [scope, id, props])

    @builtins.property
    @jsii.member(jsii_name="databaseCluster")
    def database_cluster(self) -> _aws_cdk_aws_rds_ceddda9d.ServerlessCluster:
        return typing.cast(_aws_cdk_aws_rds_ceddda9d.ServerlessCluster, jsii.get(self, "databaseCluster"))

    @builtins.property
    @jsii.member(jsii_name="fargateService")
    def fargate_service(self) -> _aws_cdk_aws_ecs_ceddda9d.FargateService:
        return typing.cast(_aws_cdk_aws_ecs_ceddda9d.FargateService, jsii.get(self, "fargateService"))

    @builtins.property
    @jsii.member(jsii_name="fileSystem")
    def file_system(self) -> _aws_cdk_aws_efs_ceddda9d.FileSystem:
        return typing.cast(_aws_cdk_aws_efs_ceddda9d.FileSystem, jsii.get(self, "fileSystem"))

    @builtins.property
    @jsii.member(jsii_name="taskDefinition")
    def task_definition(self) -> _aws_cdk_aws_ecs_ceddda9d.FargateTaskDefinition:
        return typing.cast(_aws_cdk_aws_ecs_ceddda9d.FargateTaskDefinition, jsii.get(self, "taskDefinition"))


@jsii.data_type(
    jsii_type="@blimmer/cdk-static-wordpress.EcsTaskProps",
    jsii_struct_bases=[],
    name_mapping={
        "fully_qualified_site_name": "fullyQualifiedSiteName",
        "hosted_zone": "hostedZone",
        "site_id": "siteId",
        "static_hosting": "staticHosting",
        "wordpress_admin_props": "wordpressAdminProps",
        "wordpress_docker_image": "wordpressDockerImage",
        "ecs_cluster": "ecsCluster",
        "vpc": "vpc",
        "wordpress_database_props": "wordpressDatabaseProps",
    },
)
class EcsTaskProps:
    def __init__(
        self,
        *,
        fully_qualified_site_name: builtins.str,
        hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
        site_id: builtins.str,
        static_hosting: "StaticHosting",
        wordpress_admin_props: typing.Union["WordpressAdminProps", typing.Dict[builtins.str, typing.Any]],
        wordpress_docker_image: "WordpressDockerImage",
        ecs_cluster: typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster] = None,
        vpc: typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc] = None,
        wordpress_database_props: typing.Optional[typing.Union["WordpressDatabaseProps", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param fully_qualified_site_name: 
        :param hosted_zone: 
        :param site_id: 
        :param static_hosting: 
        :param wordpress_admin_props: 
        :param wordpress_docker_image: 
        :param ecs_cluster: 
        :param vpc: 
        :param wordpress_database_props: 
        '''
        if isinstance(wordpress_admin_props, dict):
            wordpress_admin_props = WordpressAdminProps(**wordpress_admin_props)
        if isinstance(wordpress_database_props, dict):
            wordpress_database_props = WordpressDatabaseProps(**wordpress_database_props)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__950e0c1a49e60062031199dfbd8e50a498d62afb4aa28c650e5ad71bf60810fa)
            check_type(argname="argument fully_qualified_site_name", value=fully_qualified_site_name, expected_type=type_hints["fully_qualified_site_name"])
            check_type(argname="argument hosted_zone", value=hosted_zone, expected_type=type_hints["hosted_zone"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument static_hosting", value=static_hosting, expected_type=type_hints["static_hosting"])
            check_type(argname="argument wordpress_admin_props", value=wordpress_admin_props, expected_type=type_hints["wordpress_admin_props"])
            check_type(argname="argument wordpress_docker_image", value=wordpress_docker_image, expected_type=type_hints["wordpress_docker_image"])
            check_type(argname="argument ecs_cluster", value=ecs_cluster, expected_type=type_hints["ecs_cluster"])
            check_type(argname="argument vpc", value=vpc, expected_type=type_hints["vpc"])
            check_type(argname="argument wordpress_database_props", value=wordpress_database_props, expected_type=type_hints["wordpress_database_props"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "fully_qualified_site_name": fully_qualified_site_name,
            "hosted_zone": hosted_zone,
            "site_id": site_id,
            "static_hosting": static_hosting,
            "wordpress_admin_props": wordpress_admin_props,
            "wordpress_docker_image": wordpress_docker_image,
        }
        if ecs_cluster is not None:
            self._values["ecs_cluster"] = ecs_cluster
        if vpc is not None:
            self._values["vpc"] = vpc
        if wordpress_database_props is not None:
            self._values["wordpress_database_props"] = wordpress_database_props

    @builtins.property
    def fully_qualified_site_name(self) -> builtins.str:
        result = self._values.get("fully_qualified_site_name")
        assert result is not None, "Required property 'fully_qualified_site_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def hosted_zone(self) -> _aws_cdk_aws_route53_ceddda9d.IHostedZone:
        result = self._values.get("hosted_zone")
        assert result is not None, "Required property 'hosted_zone' is missing"
        return typing.cast(_aws_cdk_aws_route53_ceddda9d.IHostedZone, result)

    @builtins.property
    def site_id(self) -> builtins.str:
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def static_hosting(self) -> "StaticHosting":
        result = self._values.get("static_hosting")
        assert result is not None, "Required property 'static_hosting' is missing"
        return typing.cast("StaticHosting", result)

    @builtins.property
    def wordpress_admin_props(self) -> "WordpressAdminProps":
        result = self._values.get("wordpress_admin_props")
        assert result is not None, "Required property 'wordpress_admin_props' is missing"
        return typing.cast("WordpressAdminProps", result)

    @builtins.property
    def wordpress_docker_image(self) -> "WordpressDockerImage":
        result = self._values.get("wordpress_docker_image")
        assert result is not None, "Required property 'wordpress_docker_image' is missing"
        return typing.cast("WordpressDockerImage", result)

    @builtins.property
    def ecs_cluster(self) -> typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster]:
        result = self._values.get("ecs_cluster")
        return typing.cast(typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster], result)

    @builtins.property
    def vpc(self) -> typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc]:
        result = self._values.get("vpc")
        return typing.cast(typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc], result)

    @builtins.property
    def wordpress_database_props(self) -> typing.Optional["WordpressDatabaseProps"]:
        result = self._values.get("wordpress_database_props")
        return typing.cast(typing.Optional["WordpressDatabaseProps"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "EcsTaskProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class StaticHosting(
    _constructs_77d1e7e8.Construct,
    metaclass=jsii.JSIIMeta,
    jsii_type="@blimmer/cdk-static-wordpress.StaticHosting",
):
    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id: builtins.str,
        *,
        fully_qualified_site_name: builtins.str,
        hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
        site_id: builtins.str,
        cloud_front_distribution_config: typing.Optional[typing.Union[CloudFrontDistributionConfig, typing.Dict[builtins.str, typing.Any]]] = None,
        redirects: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param scope: -
        :param id: -
        :param fully_qualified_site_name: 
        :param hosted_zone: 
        :param site_id: 
        :param cloud_front_distribution_config: 
        :param redirects: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdb5af709ea71dc174f022c325998cdda1f85b7048c66e9964dc50f8891a64f5)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        props = StaticHostingProps(
            fully_qualified_site_name=fully_qualified_site_name,
            hosted_zone=hosted_zone,
            site_id=site_id,
            cloud_front_distribution_config=cloud_front_distribution_config,
            redirects=redirects,
        )

        jsii.create(self.__class__, self, [scope, id, props])

    @builtins.property
    @jsii.member(jsii_name="bucket")
    def bucket(self) -> _aws_cdk_aws_s3_ceddda9d.Bucket:
        return typing.cast(_aws_cdk_aws_s3_ceddda9d.Bucket, jsii.get(self, "bucket"))

    @builtins.property
    @jsii.member(jsii_name="distribution")
    def distribution(self) -> _aws_cdk_aws_cloudfront_ceddda9d.Distribution:
        return typing.cast(_aws_cdk_aws_cloudfront_ceddda9d.Distribution, jsii.get(self, "distribution"))


@jsii.data_type(
    jsii_type="@blimmer/cdk-static-wordpress.StaticHostingProps",
    jsii_struct_bases=[],
    name_mapping={
        "fully_qualified_site_name": "fullyQualifiedSiteName",
        "hosted_zone": "hostedZone",
        "site_id": "siteId",
        "cloud_front_distribution_config": "cloudFrontDistributionConfig",
        "redirects": "redirects",
    },
)
class StaticHostingProps:
    def __init__(
        self,
        *,
        fully_qualified_site_name: builtins.str,
        hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
        site_id: builtins.str,
        cloud_front_distribution_config: typing.Optional[typing.Union[CloudFrontDistributionConfig, typing.Dict[builtins.str, typing.Any]]] = None,
        redirects: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param fully_qualified_site_name: 
        :param hosted_zone: 
        :param site_id: 
        :param cloud_front_distribution_config: 
        :param redirects: 
        '''
        if isinstance(cloud_front_distribution_config, dict):
            cloud_front_distribution_config = CloudFrontDistributionConfig(**cloud_front_distribution_config)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e58a4a8525a11f65e814923cb6ab06fb9cb76df734dd725a10555e5ef0566d3)
            check_type(argname="argument fully_qualified_site_name", value=fully_qualified_site_name, expected_type=type_hints["fully_qualified_site_name"])
            check_type(argname="argument hosted_zone", value=hosted_zone, expected_type=type_hints["hosted_zone"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument cloud_front_distribution_config", value=cloud_front_distribution_config, expected_type=type_hints["cloud_front_distribution_config"])
            check_type(argname="argument redirects", value=redirects, expected_type=type_hints["redirects"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "fully_qualified_site_name": fully_qualified_site_name,
            "hosted_zone": hosted_zone,
            "site_id": site_id,
        }
        if cloud_front_distribution_config is not None:
            self._values["cloud_front_distribution_config"] = cloud_front_distribution_config
        if redirects is not None:
            self._values["redirects"] = redirects

    @builtins.property
    def fully_qualified_site_name(self) -> builtins.str:
        result = self._values.get("fully_qualified_site_name")
        assert result is not None, "Required property 'fully_qualified_site_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def hosted_zone(self) -> _aws_cdk_aws_route53_ceddda9d.IHostedZone:
        result = self._values.get("hosted_zone")
        assert result is not None, "Required property 'hosted_zone' is missing"
        return typing.cast(_aws_cdk_aws_route53_ceddda9d.IHostedZone, result)

    @builtins.property
    def site_id(self) -> builtins.str:
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def cloud_front_distribution_config(
        self,
    ) -> typing.Optional[CloudFrontDistributionConfig]:
        result = self._values.get("cloud_front_distribution_config")
        return typing.cast(typing.Optional[CloudFrontDistributionConfig], result)

    @builtins.property
    def redirects(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        result = self._values.get("redirects")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StaticHostingProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class StaticWordpress(
    _constructs_77d1e7e8.Construct,
    metaclass=jsii.JSIIMeta,
    jsii_type="@blimmer/cdk-static-wordpress.StaticWordpress",
):
    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id: builtins.str,
        *,
        fully_qualified_site_name: builtins.str,
        hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
        wordpress_admin_props: typing.Union["WordpressAdminProps", typing.Dict[builtins.str, typing.Any]],
        cloud_front_distribution_config: typing.Optional[typing.Union[CloudFrontDistributionConfig, typing.Dict[builtins.str, typing.Any]]] = None,
        ecs_cluster: typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster] = None,
        site_id: typing.Optional[builtins.str] = None,
        vpc: typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc] = None,
        wordpress_database_props: typing.Optional[typing.Union["WordpressDatabaseProps", typing.Dict[builtins.str, typing.Any]]] = None,
        wordpress_docker_image_props: typing.Optional[typing.Union["WordpressDockerImageProps", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param scope: -
        :param id: -
        :param fully_qualified_site_name: The fully qualified site name (e.g., myblog.com or subdomain.myblog.com).
        :param hosted_zone: The HostedZone to use to create DNS entries for the site.
        :param wordpress_admin_props: 
        :param cloud_front_distribution_config: 
        :param ecs_cluster: The ECS cluster for the Wordpress admin site. Default: - a new ECS cluster will be created
        :param site_id: An ID to use throughout this construct to identify resources. Any non-word characters will be replaced with dashes. NOTE: if you intend to change the domain name (via ``fullyQualifiedSiteName``), you should set this ``siteId`` to a static value. Otherwise, the ``siteId`` will change when you change the site name. Default: - the ``fullyQualifiedSiteName`` will be sanitized and used
        :param vpc: The VPC assigned to the ``ecsCluster``. Default: - a new VPC will be created
        :param wordpress_database_props: 
        :param wordpress_docker_image_props: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd2fc1160a4ad96c3edecf2c41ed215045efabbae073ac6c254b3d2b08bb33f3)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        props = StaticWordpressProps(
            fully_qualified_site_name=fully_qualified_site_name,
            hosted_zone=hosted_zone,
            wordpress_admin_props=wordpress_admin_props,
            cloud_front_distribution_config=cloud_front_distribution_config,
            ecs_cluster=ecs_cluster,
            site_id=site_id,
            vpc=vpc,
            wordpress_database_props=wordpress_database_props,
            wordpress_docker_image_props=wordpress_docker_image_props,
        )

        jsii.create(self.__class__, self, [scope, id, props])

    @builtins.property
    @jsii.member(jsii_name="ecsTask")
    def ecs_task(self) -> EcsTask:
        return typing.cast(EcsTask, jsii.get(self, "ecsTask"))

    @builtins.property
    @jsii.member(jsii_name="staticHosting")
    def static_hosting(self) -> StaticHosting:
        return typing.cast(StaticHosting, jsii.get(self, "staticHosting"))

    @builtins.property
    @jsii.member(jsii_name="wordpressDockerImage")
    def wordpress_docker_image(self) -> "WordpressDockerImage":
        return typing.cast("WordpressDockerImage", jsii.get(self, "wordpressDockerImage"))


@jsii.data_type(
    jsii_type="@blimmer/cdk-static-wordpress.StaticWordpressProps",
    jsii_struct_bases=[],
    name_mapping={
        "fully_qualified_site_name": "fullyQualifiedSiteName",
        "hosted_zone": "hostedZone",
        "wordpress_admin_props": "wordpressAdminProps",
        "cloud_front_distribution_config": "cloudFrontDistributionConfig",
        "ecs_cluster": "ecsCluster",
        "site_id": "siteId",
        "vpc": "vpc",
        "wordpress_database_props": "wordpressDatabaseProps",
        "wordpress_docker_image_props": "wordpressDockerImageProps",
    },
)
class StaticWordpressProps:
    def __init__(
        self,
        *,
        fully_qualified_site_name: builtins.str,
        hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
        wordpress_admin_props: typing.Union["WordpressAdminProps", typing.Dict[builtins.str, typing.Any]],
        cloud_front_distribution_config: typing.Optional[typing.Union[CloudFrontDistributionConfig, typing.Dict[builtins.str, typing.Any]]] = None,
        ecs_cluster: typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster] = None,
        site_id: typing.Optional[builtins.str] = None,
        vpc: typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc] = None,
        wordpress_database_props: typing.Optional[typing.Union["WordpressDatabaseProps", typing.Dict[builtins.str, typing.Any]]] = None,
        wordpress_docker_image_props: typing.Optional[typing.Union["WordpressDockerImageProps", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param fully_qualified_site_name: The fully qualified site name (e.g., myblog.com or subdomain.myblog.com).
        :param hosted_zone: The HostedZone to use to create DNS entries for the site.
        :param wordpress_admin_props: 
        :param cloud_front_distribution_config: 
        :param ecs_cluster: The ECS cluster for the Wordpress admin site. Default: - a new ECS cluster will be created
        :param site_id: An ID to use throughout this construct to identify resources. Any non-word characters will be replaced with dashes. NOTE: if you intend to change the domain name (via ``fullyQualifiedSiteName``), you should set this ``siteId`` to a static value. Otherwise, the ``siteId`` will change when you change the site name. Default: - the ``fullyQualifiedSiteName`` will be sanitized and used
        :param vpc: The VPC assigned to the ``ecsCluster``. Default: - a new VPC will be created
        :param wordpress_database_props: 
        :param wordpress_docker_image_props: 
        '''
        if isinstance(wordpress_admin_props, dict):
            wordpress_admin_props = WordpressAdminProps(**wordpress_admin_props)
        if isinstance(cloud_front_distribution_config, dict):
            cloud_front_distribution_config = CloudFrontDistributionConfig(**cloud_front_distribution_config)
        if isinstance(wordpress_database_props, dict):
            wordpress_database_props = WordpressDatabaseProps(**wordpress_database_props)
        if isinstance(wordpress_docker_image_props, dict):
            wordpress_docker_image_props = WordpressDockerImageProps(**wordpress_docker_image_props)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c420ed92f5e98468a707cd8ba569ab19533c46331752a69967ed0b016fb29fab)
            check_type(argname="argument fully_qualified_site_name", value=fully_qualified_site_name, expected_type=type_hints["fully_qualified_site_name"])
            check_type(argname="argument hosted_zone", value=hosted_zone, expected_type=type_hints["hosted_zone"])
            check_type(argname="argument wordpress_admin_props", value=wordpress_admin_props, expected_type=type_hints["wordpress_admin_props"])
            check_type(argname="argument cloud_front_distribution_config", value=cloud_front_distribution_config, expected_type=type_hints["cloud_front_distribution_config"])
            check_type(argname="argument ecs_cluster", value=ecs_cluster, expected_type=type_hints["ecs_cluster"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument vpc", value=vpc, expected_type=type_hints["vpc"])
            check_type(argname="argument wordpress_database_props", value=wordpress_database_props, expected_type=type_hints["wordpress_database_props"])
            check_type(argname="argument wordpress_docker_image_props", value=wordpress_docker_image_props, expected_type=type_hints["wordpress_docker_image_props"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "fully_qualified_site_name": fully_qualified_site_name,
            "hosted_zone": hosted_zone,
            "wordpress_admin_props": wordpress_admin_props,
        }
        if cloud_front_distribution_config is not None:
            self._values["cloud_front_distribution_config"] = cloud_front_distribution_config
        if ecs_cluster is not None:
            self._values["ecs_cluster"] = ecs_cluster
        if site_id is not None:
            self._values["site_id"] = site_id
        if vpc is not None:
            self._values["vpc"] = vpc
        if wordpress_database_props is not None:
            self._values["wordpress_database_props"] = wordpress_database_props
        if wordpress_docker_image_props is not None:
            self._values["wordpress_docker_image_props"] = wordpress_docker_image_props

    @builtins.property
    def fully_qualified_site_name(self) -> builtins.str:
        '''The fully qualified site name (e.g., myblog.com or subdomain.myblog.com).'''
        result = self._values.get("fully_qualified_site_name")
        assert result is not None, "Required property 'fully_qualified_site_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def hosted_zone(self) -> _aws_cdk_aws_route53_ceddda9d.IHostedZone:
        '''The HostedZone to use to create DNS entries for the site.'''
        result = self._values.get("hosted_zone")
        assert result is not None, "Required property 'hosted_zone' is missing"
        return typing.cast(_aws_cdk_aws_route53_ceddda9d.IHostedZone, result)

    @builtins.property
    def wordpress_admin_props(self) -> "WordpressAdminProps":
        result = self._values.get("wordpress_admin_props")
        assert result is not None, "Required property 'wordpress_admin_props' is missing"
        return typing.cast("WordpressAdminProps", result)

    @builtins.property
    def cloud_front_distribution_config(
        self,
    ) -> typing.Optional[CloudFrontDistributionConfig]:
        result = self._values.get("cloud_front_distribution_config")
        return typing.cast(typing.Optional[CloudFrontDistributionConfig], result)

    @builtins.property
    def ecs_cluster(self) -> typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster]:
        '''The ECS cluster for the Wordpress admin site.

        :default: - a new ECS cluster will be created
        '''
        result = self._values.get("ecs_cluster")
        return typing.cast(typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster], result)

    @builtins.property
    def site_id(self) -> typing.Optional[builtins.str]:
        '''An ID to use throughout this construct to identify resources. Any non-word characters will be replaced with dashes.

        NOTE: if you intend to change the domain name (via ``fullyQualifiedSiteName``), you should set this ``siteId`` to
        a static value. Otherwise, the ``siteId`` will change when you change the site name.

        :default: - the ``fullyQualifiedSiteName`` will be sanitized and used
        '''
        result = self._values.get("site_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def vpc(self) -> typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc]:
        '''The VPC assigned to the ``ecsCluster``.

        :default: - a new VPC will be created
        '''
        result = self._values.get("vpc")
        return typing.cast(typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc], result)

    @builtins.property
    def wordpress_database_props(self) -> typing.Optional["WordpressDatabaseProps"]:
        result = self._values.get("wordpress_database_props")
        return typing.cast(typing.Optional["WordpressDatabaseProps"], result)

    @builtins.property
    def wordpress_docker_image_props(
        self,
    ) -> typing.Optional["WordpressDockerImageProps"]:
        result = self._values.get("wordpress_docker_image_props")
        return typing.cast(typing.Optional["WordpressDockerImageProps"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StaticWordpressProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@blimmer/cdk-static-wordpress.WordpressAdminProps",
    jsii_struct_bases=[],
    name_mapping={
        "email": "email",
        "domain_prefix": "domainPrefix",
        "enable_ecs_exec": "enableEcsExec",
        "password": "password",
        "run": "run",
        "username": "username",
    },
)
class WordpressAdminProps:
    def __init__(
        self,
        *,
        email: builtins.str,
        domain_prefix: typing.Optional[builtins.str] = None,
        enable_ecs_exec: typing.Optional[builtins.bool] = None,
        password: typing.Optional[builtins.str] = None,
        run: typing.Optional[builtins.bool] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param email: 
        :param domain_prefix: The prefix to use for the non-static admin site. For example, if your static site is foo.example.com and you pass ``-admin`` here, the admin site will be served at admin-foo.example.com. Default: - "admin-"
        :param enable_ecs_exec: Enables ECS Exec (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html). You can use this to access the container running the Wordpress admin console. NOTE: If you enable toggle this flag for an already-running WP Admin site, you'll need to manually stop the existing task. The ECS service will replace the task with a new one that has ECS Exec enabled. This is a CloudFormation limitation. Default: false
        :param password: 
        :param run: Should we run the Wordpress admin console? Set this to ``false`` to save money when you're not actively editing the site. Default: true
        :param username: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12958bbeb6a92f2fb3977ebb70c5fda7295edc247aaafd0b4d536120017faaae)
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
            check_type(argname="argument domain_prefix", value=domain_prefix, expected_type=type_hints["domain_prefix"])
            check_type(argname="argument enable_ecs_exec", value=enable_ecs_exec, expected_type=type_hints["enable_ecs_exec"])
            check_type(argname="argument password", value=password, expected_type=type_hints["password"])
            check_type(argname="argument run", value=run, expected_type=type_hints["run"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "email": email,
        }
        if domain_prefix is not None:
            self._values["domain_prefix"] = domain_prefix
        if enable_ecs_exec is not None:
            self._values["enable_ecs_exec"] = enable_ecs_exec
        if password is not None:
            self._values["password"] = password
        if run is not None:
            self._values["run"] = run
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def email(self) -> builtins.str:
        result = self._values.get("email")
        assert result is not None, "Required property 'email' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def domain_prefix(self) -> typing.Optional[builtins.str]:
        '''The prefix to use for the non-static admin site.

        For example, if your static site is
        foo.example.com and you pass ``-admin`` here, the admin site will be served at admin-foo.example.com.

        :default: - "admin-"
        '''
        result = self._values.get("domain_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def enable_ecs_exec(self) -> typing.Optional[builtins.bool]:
        '''Enables ECS Exec (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html). You can use this to access the container running the Wordpress admin console.

        NOTE: If you enable toggle this flag for an already-running WP Admin site, you'll need to manually stop the
        existing task. The ECS service will replace the task with a new one that has ECS Exec enabled. This is a
        CloudFormation limitation.

        :default: false
        '''
        result = self._values.get("enable_ecs_exec")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def password(self) -> typing.Optional[builtins.str]:
        result = self._values.get("password")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def run(self) -> typing.Optional[builtins.bool]:
        '''Should we run the Wordpress admin console?

        Set this to ``false`` to save money when you're not actively editing
        the site.

        :default: true
        '''
        result = self._values.get("run")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "WordpressAdminProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@blimmer/cdk-static-wordpress.WordpressDatabaseProps",
    jsii_struct_bases=[],
    name_mapping={"password": "password", "username": "username"},
)
class WordpressDatabaseProps:
    def __init__(
        self,
        *,
        password: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param password: 
        :param username: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__51ed18e24d8910c7a23c095d16dc64c07cb1c3864ee25e5115c97150899078a7)
            check_type(argname="argument password", value=password, expected_type=type_hints["password"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if password is not None:
            self._values["password"] = password
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def password(self) -> typing.Optional[builtins.str]:
        result = self._values.get("password")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "WordpressDatabaseProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class WordpressDockerImage(
    _constructs_77d1e7e8.Construct,
    metaclass=jsii.JSIIMeta,
    jsii_type="@blimmer/cdk-static-wordpress.WordpressDockerImage",
):
    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id: builtins.str,
        *,
        container_cpu: typing.Optional[jsii.Number] = None,
        container_memory: typing.Optional[jsii.Number] = None,
        wordpress_docker_image_base: typing.Optional[builtins.str] = None,
        wordpress_memory_limit: typing.Optional[builtins.str] = None,
        wp2_static_s3_addon_version: typing.Optional[builtins.str] = None,
        wp2_static_version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param scope: -
        :param id: -
        :param container_cpu: The number of vCPU units to give the ECS container at runtime. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu for details on available configurations Default: - 256 (0.25 vCPU)
        :param container_memory: Memory to give the ECS container at runtime. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-memory for details on available configurations Default: - 512 (MB)
        :param wordpress_docker_image_base: Default: - wordpress:php7.4-apache
        :param wordpress_memory_limit: This configures how much memory is given to Wordpress. It's different than container memory, which is configured by ``containerMemory``. See https://developer.wordpress.org/apis/wp-config-php/#increasing-memory-allocated-to-php for details on this setting. Default: - 256M
        :param wp2_static_s3_addon_version: Default: - 1.0
        :param wp2_static_version: The version of wp2static to install. See https://github.com/WP2Static/wp2static/releases for available version Default: - 7.2
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aae0b4436edf3a96a8116dd877888ed1b78fcabcd44330904671d670c294e75f)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        props = WordpressDockerImageProps(
            container_cpu=container_cpu,
            container_memory=container_memory,
            wordpress_docker_image_base=wordpress_docker_image_base,
            wordpress_memory_limit=wordpress_memory_limit,
            wp2_static_s3_addon_version=wp2_static_s3_addon_version,
            wp2_static_version=wp2_static_version,
        )

        jsii.create(self.__class__, self, [scope, id, props])

    @builtins.property
    @jsii.member(jsii_name="containerCpu")
    def container_cpu(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "containerCpu"))

    @builtins.property
    @jsii.member(jsii_name="containerMemory")
    def container_memory(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "containerMemory"))

    @builtins.property
    @jsii.member(jsii_name="dockerImageAsset")
    def docker_image_asset(self) -> _aws_cdk_aws_ecr_assets_ceddda9d.DockerImageAsset:
        return typing.cast(_aws_cdk_aws_ecr_assets_ceddda9d.DockerImageAsset, jsii.get(self, "dockerImageAsset"))

    @builtins.property
    @jsii.member(jsii_name="wordpressMemoryLimit")
    def wordpress_memory_limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "wordpressMemoryLimit"))


@jsii.data_type(
    jsii_type="@blimmer/cdk-static-wordpress.WordpressDockerImageProps",
    jsii_struct_bases=[],
    name_mapping={
        "container_cpu": "containerCpu",
        "container_memory": "containerMemory",
        "wordpress_docker_image_base": "wordpressDockerImageBase",
        "wordpress_memory_limit": "wordpressMemoryLimit",
        "wp2_static_s3_addon_version": "wp2StaticS3AddonVersion",
        "wp2_static_version": "wp2StaticVersion",
    },
)
class WordpressDockerImageProps:
    def __init__(
        self,
        *,
        container_cpu: typing.Optional[jsii.Number] = None,
        container_memory: typing.Optional[jsii.Number] = None,
        wordpress_docker_image_base: typing.Optional[builtins.str] = None,
        wordpress_memory_limit: typing.Optional[builtins.str] = None,
        wp2_static_s3_addon_version: typing.Optional[builtins.str] = None,
        wp2_static_version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param container_cpu: The number of vCPU units to give the ECS container at runtime. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu for details on available configurations Default: - 256 (0.25 vCPU)
        :param container_memory: Memory to give the ECS container at runtime. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-memory for details on available configurations Default: - 512 (MB)
        :param wordpress_docker_image_base: Default: - wordpress:php7.4-apache
        :param wordpress_memory_limit: This configures how much memory is given to Wordpress. It's different than container memory, which is configured by ``containerMemory``. See https://developer.wordpress.org/apis/wp-config-php/#increasing-memory-allocated-to-php for details on this setting. Default: - 256M
        :param wp2_static_s3_addon_version: Default: - 1.0
        :param wp2_static_version: The version of wp2static to install. See https://github.com/WP2Static/wp2static/releases for available version Default: - 7.2
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1189129bfa0fbc7a19851bb9e547d015c96ad47f3ec32df85a06a19b2a55189f)
            check_type(argname="argument container_cpu", value=container_cpu, expected_type=type_hints["container_cpu"])
            check_type(argname="argument container_memory", value=container_memory, expected_type=type_hints["container_memory"])
            check_type(argname="argument wordpress_docker_image_base", value=wordpress_docker_image_base, expected_type=type_hints["wordpress_docker_image_base"])
            check_type(argname="argument wordpress_memory_limit", value=wordpress_memory_limit, expected_type=type_hints["wordpress_memory_limit"])
            check_type(argname="argument wp2_static_s3_addon_version", value=wp2_static_s3_addon_version, expected_type=type_hints["wp2_static_s3_addon_version"])
            check_type(argname="argument wp2_static_version", value=wp2_static_version, expected_type=type_hints["wp2_static_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if container_cpu is not None:
            self._values["container_cpu"] = container_cpu
        if container_memory is not None:
            self._values["container_memory"] = container_memory
        if wordpress_docker_image_base is not None:
            self._values["wordpress_docker_image_base"] = wordpress_docker_image_base
        if wordpress_memory_limit is not None:
            self._values["wordpress_memory_limit"] = wordpress_memory_limit
        if wp2_static_s3_addon_version is not None:
            self._values["wp2_static_s3_addon_version"] = wp2_static_s3_addon_version
        if wp2_static_version is not None:
            self._values["wp2_static_version"] = wp2_static_version

    @builtins.property
    def container_cpu(self) -> typing.Optional[jsii.Number]:
        '''The number of vCPU units to give the ECS container at runtime.

        See
        https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu
        for details on available configurations

        :default: - 256 (0.25 vCPU)
        '''
        result = self._values.get("container_cpu")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def container_memory(self) -> typing.Optional[jsii.Number]:
        '''Memory to give the ECS container at runtime.

        See
        https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-memory
        for details on available configurations

        :default: - 512 (MB)
        '''
        result = self._values.get("container_memory")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def wordpress_docker_image_base(self) -> typing.Optional[builtins.str]:
        '''
        :default: - wordpress:php7.4-apache
        '''
        result = self._values.get("wordpress_docker_image_base")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def wordpress_memory_limit(self) -> typing.Optional[builtins.str]:
        '''This configures how much memory is given to Wordpress.

        It's different than container memory,
        which is configured by ``containerMemory``. See
        https://developer.wordpress.org/apis/wp-config-php/#increasing-memory-allocated-to-php
        for details on this setting.

        :default: - 256M
        '''
        result = self._values.get("wordpress_memory_limit")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def wp2_static_s3_addon_version(self) -> typing.Optional[builtins.str]:
        '''
        :default: - 1.0
        '''
        result = self._values.get("wp2_static_s3_addon_version")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def wp2_static_version(self) -> typing.Optional[builtins.str]:
        '''The version of wp2static to install.

        See
        https://github.com/WP2Static/wp2static/releases for available version

        :default: - 7.2
        '''
        result = self._values.get("wp2_static_version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "WordpressDockerImageProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "CloudFrontDistributionConfig",
    "EcsTask",
    "EcsTaskProps",
    "StaticHosting",
    "StaticHostingProps",
    "StaticWordpress",
    "StaticWordpressProps",
    "WordpressAdminProps",
    "WordpressDatabaseProps",
    "WordpressDockerImage",
    "WordpressDockerImageProps",
]

publication.publish()

def _typecheckingstub__847b4264bbac4e16ebc001d7da4cdd60ea9b319b7096a9e740e6e34ba1248757(
    *,
    function_associations: typing.Optional[typing.Sequence[typing.Union[_aws_cdk_aws_cloudfront_ceddda9d.FunctionAssociation, typing.Dict[builtins.str, typing.Any]]]] = None,
    price_class: typing.Optional[_aws_cdk_aws_cloudfront_ceddda9d.PriceClass] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__336da97d57a79070aa7f01c569cdd1ba666ad56b7ceab5361342aeaa58a2436d(
    scope: _constructs_77d1e7e8.Construct,
    id: builtins.str,
    *,
    fully_qualified_site_name: builtins.str,
    hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
    site_id: builtins.str,
    static_hosting: StaticHosting,
    wordpress_admin_props: typing.Union[WordpressAdminProps, typing.Dict[builtins.str, typing.Any]],
    wordpress_docker_image: WordpressDockerImage,
    ecs_cluster: typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster] = None,
    vpc: typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc] = None,
    wordpress_database_props: typing.Optional[typing.Union[WordpressDatabaseProps, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__950e0c1a49e60062031199dfbd8e50a498d62afb4aa28c650e5ad71bf60810fa(
    *,
    fully_qualified_site_name: builtins.str,
    hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
    site_id: builtins.str,
    static_hosting: StaticHosting,
    wordpress_admin_props: typing.Union[WordpressAdminProps, typing.Dict[builtins.str, typing.Any]],
    wordpress_docker_image: WordpressDockerImage,
    ecs_cluster: typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster] = None,
    vpc: typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc] = None,
    wordpress_database_props: typing.Optional[typing.Union[WordpressDatabaseProps, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdb5af709ea71dc174f022c325998cdda1f85b7048c66e9964dc50f8891a64f5(
    scope: _constructs_77d1e7e8.Construct,
    id: builtins.str,
    *,
    fully_qualified_site_name: builtins.str,
    hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
    site_id: builtins.str,
    cloud_front_distribution_config: typing.Optional[typing.Union[CloudFrontDistributionConfig, typing.Dict[builtins.str, typing.Any]]] = None,
    redirects: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e58a4a8525a11f65e814923cb6ab06fb9cb76df734dd725a10555e5ef0566d3(
    *,
    fully_qualified_site_name: builtins.str,
    hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
    site_id: builtins.str,
    cloud_front_distribution_config: typing.Optional[typing.Union[CloudFrontDistributionConfig, typing.Dict[builtins.str, typing.Any]]] = None,
    redirects: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd2fc1160a4ad96c3edecf2c41ed215045efabbae073ac6c254b3d2b08bb33f3(
    scope: _constructs_77d1e7e8.Construct,
    id: builtins.str,
    *,
    fully_qualified_site_name: builtins.str,
    hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
    wordpress_admin_props: typing.Union[WordpressAdminProps, typing.Dict[builtins.str, typing.Any]],
    cloud_front_distribution_config: typing.Optional[typing.Union[CloudFrontDistributionConfig, typing.Dict[builtins.str, typing.Any]]] = None,
    ecs_cluster: typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster] = None,
    site_id: typing.Optional[builtins.str] = None,
    vpc: typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc] = None,
    wordpress_database_props: typing.Optional[typing.Union[WordpressDatabaseProps, typing.Dict[builtins.str, typing.Any]]] = None,
    wordpress_docker_image_props: typing.Optional[typing.Union[WordpressDockerImageProps, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c420ed92f5e98468a707cd8ba569ab19533c46331752a69967ed0b016fb29fab(
    *,
    fully_qualified_site_name: builtins.str,
    hosted_zone: _aws_cdk_aws_route53_ceddda9d.IHostedZone,
    wordpress_admin_props: typing.Union[WordpressAdminProps, typing.Dict[builtins.str, typing.Any]],
    cloud_front_distribution_config: typing.Optional[typing.Union[CloudFrontDistributionConfig, typing.Dict[builtins.str, typing.Any]]] = None,
    ecs_cluster: typing.Optional[_aws_cdk_aws_ecs_ceddda9d.ICluster] = None,
    site_id: typing.Optional[builtins.str] = None,
    vpc: typing.Optional[_aws_cdk_aws_ec2_ceddda9d.IVpc] = None,
    wordpress_database_props: typing.Optional[typing.Union[WordpressDatabaseProps, typing.Dict[builtins.str, typing.Any]]] = None,
    wordpress_docker_image_props: typing.Optional[typing.Union[WordpressDockerImageProps, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12958bbeb6a92f2fb3977ebb70c5fda7295edc247aaafd0b4d536120017faaae(
    *,
    email: builtins.str,
    domain_prefix: typing.Optional[builtins.str] = None,
    enable_ecs_exec: typing.Optional[builtins.bool] = None,
    password: typing.Optional[builtins.str] = None,
    run: typing.Optional[builtins.bool] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__51ed18e24d8910c7a23c095d16dc64c07cb1c3864ee25e5115c97150899078a7(
    *,
    password: typing.Optional[builtins.str] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aae0b4436edf3a96a8116dd877888ed1b78fcabcd44330904671d670c294e75f(
    scope: _constructs_77d1e7e8.Construct,
    id: builtins.str,
    *,
    container_cpu: typing.Optional[jsii.Number] = None,
    container_memory: typing.Optional[jsii.Number] = None,
    wordpress_docker_image_base: typing.Optional[builtins.str] = None,
    wordpress_memory_limit: typing.Optional[builtins.str] = None,
    wp2_static_s3_addon_version: typing.Optional[builtins.str] = None,
    wp2_static_version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1189129bfa0fbc7a19851bb9e547d015c96ad47f3ec32df85a06a19b2a55189f(
    *,
    container_cpu: typing.Optional[jsii.Number] = None,
    container_memory: typing.Optional[jsii.Number] = None,
    wordpress_docker_image_base: typing.Optional[builtins.str] = None,
    wordpress_memory_limit: typing.Optional[builtins.str] = None,
    wp2_static_s3_addon_version: typing.Optional[builtins.str] = None,
    wp2_static_version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass
