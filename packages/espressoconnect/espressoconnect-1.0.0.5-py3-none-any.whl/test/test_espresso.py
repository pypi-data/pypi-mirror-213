from espressoApi.espressoConnect import EspressoConnect

api_key = "Ypur Api Key"
vendor_key=""           # vendor key for vendor login otherwise keep it null
state=12345
espressoApi = EspressoConnect(api_key)
print(espressoApi.login_url())
request_token="Your request token"
secret_key="Your secret key"

"""Use generate session method for decrypt and re-encrypt the request token value """
session = espressoApi.generate_session(request_token,secret_key)

"""Use get_access_token for generating access token """
access_token=espressoApi.get_access_token(api_key,session,vendor_key,state)
print(access_token)

access_token = 'Your access token value'
espressoApi = EspressoConnect(api_key=api_key,access_token=access_token)
print(espressoApi.requestHeaders())         # for printing request headers

# Place order history

orderparams={
 "customerId": "XXXXXXX",
 "scripCode": 2475,
 "tradingSymbol": "ONGC",
 "exchange": "NC",
 "transactionType": "B",
 "quantity": 1,
 "disclosedQty": 0,
 "price": "150.5",
 "triggerPrice": "0",
 "rmsCode": "ANY",
"afterHour": "N",
 "orderType": "NORMAL",
 "channelUser": "XXXXXXX",
 "validity": "GFD",
 "requestType": "NEW",
 "productType": "CNC"
}
order=espressoApi.placeOrder(orderparams)
print("PlaceOrder: {}".format(order))

# modify order

orderparams={
    "orderId": "XXXXXXX",
    "customerId": "XXXXXXX",
    "scripCode": 2475,
    "tradingSymbol": "ONGC",
    "exchange": "NC",
    "transactionType": "B",
    "quantity": 1,
    "disclosedQty": 0,
    "price": "150.5",
    "triggerPrice": "0",
    "rmsCode": "ANY",
    "afterHour": "N",
    "orderType": "NORMAL",
    "channelUser": "XXXXXXX",
    "validity": "GFD",
    "requestType": "MODIFY",
    "productType": "CNC"
}

order=espressoApi.modifyOrder(orderparams)
print("ModifyOrder: {}".format(order))

# cancel order
orderparams={
     "orderId": "XXXXXX",
    "customerId": "XXXXXXX",
    "scripCode": 2475,
    "tradingSymbol": "ONGC",
    "exchange": "NC",
    "transactionType": "B",
    "quantity": 1,
    "disclosedQty": 0,
    "price": "150.5",
    "triggerPrice": "0",
    "rmsCode": "ANY",
    "afterHour": "N",
    "orderType": "NORMAL",
    "channelUser": "XXXXXXX",
    "validity": "GFD",
    "requestType": "CANCEL",
    "productType": "CNC"
  }

order=espressoApi.cancelOrder(orderparams)
print("CancelOrder: {}".format(order))

# Funds Details
exchange="MX"
customerId="customerId <int data type>"
order=espressoApi.funds(exchange, customerId)
print("Retrieves Funds: {}".format(order))

# cancel order by orderid only

orderid=8013942
order=espressoApi.cancelOrderById(orderid)
print("Cancelbyid: {}".format(order))

# Retrieves all orders for the day

customerId="customerId <int data type>"
order=espressoApi.reports(customerId)
print("Order Reports: {}".format(order))

# Retrieve history of an given order
exchange="RN"
customerId="customerId <int data type>"
orderId=8016327
order=espressoApi.exchange(exchange, customerId, orderId)
print("Order Details: {}".format(order))

# Retrieves all positions

customerId="customerId <int data type>"
order=espressoApi.trades(customerId)
print("Postion Reports: {}".format(order))

# Retrieves the trade  generated by an order
exchange="NC"
customerId="customerId <int data type>"
orderId=3464606
order=espressoApi.exchangetrades(exchange, customerId, orderId)
print("Trade Generated By an Order : {}".format(order))

# services Holdings

customerId="customerId <int data type>"
order=espressoApi.holdings(customerId)
print("Holdings : {}".format(order))

# Script Master

exchange="MX"
order=espressoApi.master(exchange)
print("Script Master : {}".format(order))

# Scrip Master data by CSV-Without Access-Token

exchange="NC"
order=espressoApi.mastercsv(exchange)
print("Script Master CSV : {}".format(order))

# Historical Data
exchange="RN"
scripcode=1314
interval="daily"
order=espressoApi.historicaldata(exchange, scripcode, interval)
print("Holdings Data: {}".format(order))

# # websocket Programming Testing

from espressoApi.espressoApiWebsocket import EspressoWebSocket
params={
    "access_token": access_token,
    "api_key": api_key
}

token_list = {"action": "subscribe", "key": ["feed"], "value": [""]}
feed = {"action": "feed", "key": ["depth"], "value": ["MX250715"]}
unsubscribefeed = {"action":"unsubscribe","key":["feed"],"value":["NC22,NF37833,NF37834,MX253461,RN7719"]}

sws = EspressoWebSocket(access_token,api_key)
def on_data(wsapp, message):
    print("Ticks: {}".format(message))


def on_open(wsapp):
    print("on open")
    sws.subscribe(token_list)
    sws.fetchData(feed)
    # sws.unsubscribe(feed)
    # sws.close_connection()


def on_error(wsapp, error):
    print(error)


def on_close(wsapp):
    print("Close")

# Assign the callbacks.
sws.on_open = on_open
sws.on_data = on_data
sws.on_error = on_error
sws.on_close = on_close

sws.connect()
