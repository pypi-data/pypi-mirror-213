# Generated from Turtle.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,390,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
        2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,3,8,116,8,8,1,9,1,9,1,9,1,9,3,9,122,8,9,1,10,1,10,1,10,5,10,
        127,8,10,10,10,12,10,130,9,10,1,10,1,10,1,11,3,11,135,8,11,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,3,13,147,8,13,1,13,
        1,13,5,13,151,8,13,10,13,12,13,154,9,13,1,13,3,13,157,8,13,1,14,
        1,14,4,14,161,8,14,11,14,12,14,162,1,14,1,14,4,14,167,8,14,11,14,
        12,14,168,5,14,171,8,14,10,14,12,14,174,9,14,1,15,3,15,177,8,15,
        1,15,4,15,180,8,15,11,15,12,15,181,1,16,3,16,185,8,16,1,16,5,16,
        188,8,16,10,16,12,16,191,9,16,1,16,1,16,4,16,195,8,16,11,16,12,16,
        196,1,17,3,17,200,8,17,1,17,4,17,203,8,17,11,17,12,17,204,1,17,1,
        17,5,17,209,8,17,10,17,12,17,212,9,17,1,17,1,17,1,17,4,17,217,8,
        17,11,17,12,17,218,1,17,1,17,4,17,223,8,17,11,17,12,17,224,1,17,
        3,17,228,8,17,1,18,1,18,3,18,232,8,18,1,18,4,18,235,8,18,11,18,12,
        18,236,1,19,1,19,1,19,1,19,5,19,243,8,19,10,19,12,19,246,9,19,1,
        19,1,19,1,20,1,20,1,20,1,20,5,20,254,8,20,10,20,12,20,257,9,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,268,8,21,1,21,1,
        21,1,21,3,21,273,8,21,5,21,275,8,21,10,21,12,21,278,9,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,291,8,22,1,
        22,1,22,1,22,3,22,296,8,22,5,22,298,8,22,10,22,12,22,301,9,22,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,327,8,
        23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,3,27,340,
        8,27,1,28,1,28,3,28,344,8,28,1,29,1,29,1,29,5,29,349,8,29,10,29,
        12,29,352,9,29,1,29,3,29,355,8,29,1,30,1,30,1,30,3,30,360,8,30,1,
        30,1,30,1,30,5,30,365,8,30,10,30,12,30,368,9,30,1,30,1,30,1,30,3,
        30,373,8,30,3,30,375,8,30,1,31,1,31,3,31,379,8,31,1,32,1,32,1,32,
        1,32,1,33,3,33,386,8,33,1,34,1,34,1,34,0,0,35,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,17,8,0,0,32,
        34,34,60,60,62,62,92,92,94,94,96,96,123,125,1,0,48,57,2,0,65,90,
        97,122,3,0,48,57,65,90,97,122,2,0,43,43,45,45,2,0,69,69,101,101,
        4,0,10,10,13,13,34,34,92,92,4,0,10,10,13,13,39,39,92,92,2,0,39,39,
        92,92,2,0,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
        114,114,116,116,3,0,9,10,13,13,32,32,13,0,65,90,97,122,192,214,216,
        246,248,767,880,893,895,8191,8204,8205,8304,8591,11264,12271,12289,
        55295,63744,64975,65008,65533,5,0,45,45,48,57,183,183,768,879,8255,
        8256,2,0,46,46,58,58,3,0,48,57,65,70,97,102,7,0,33,33,35,47,59,59,
        61,61,63,64,95,95,126,126,448,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,79,1,0,0,0,5,81,1,0,0,0,
        7,87,1,0,0,0,9,92,1,0,0,0,11,99,1,0,0,0,13,102,1,0,0,0,15,104,1,
        0,0,0,17,115,1,0,0,0,19,121,1,0,0,0,21,123,1,0,0,0,23,134,1,0,0,
        0,25,138,1,0,0,0,27,141,1,0,0,0,29,158,1,0,0,0,31,176,1,0,0,0,33,
        184,1,0,0,0,35,199,1,0,0,0,37,229,1,0,0,0,39,238,1,0,0,0,41,249,
        1,0,0,0,43,260,1,0,0,0,45,283,1,0,0,0,47,326,1,0,0,0,49,328,1,0,
        0,0,51,331,1,0,0,0,53,335,1,0,0,0,55,339,1,0,0,0,57,343,1,0,0,0,
        59,345,1,0,0,0,61,359,1,0,0,0,63,378,1,0,0,0,65,380,1,0,0,0,67,385,
        1,0,0,0,69,387,1,0,0,0,71,72,5,64,0,0,72,73,5,112,0,0,73,74,5,114,
        0,0,74,75,5,101,0,0,75,76,5,102,0,0,76,77,5,105,0,0,77,78,5,120,
        0,0,78,2,1,0,0,0,79,80,5,46,0,0,80,4,1,0,0,0,81,82,5,64,0,0,82,83,
        5,98,0,0,83,84,5,97,0,0,84,85,5,115,0,0,85,86,5,101,0,0,86,6,1,0,
        0,0,87,88,5,66,0,0,88,89,5,65,0,0,89,90,5,83,0,0,90,91,5,69,0,0,
        91,8,1,0,0,0,92,93,5,80,0,0,93,94,5,82,0,0,94,95,5,69,0,0,95,96,
        5,70,0,0,96,97,5,73,0,0,97,98,5,88,0,0,98,10,1,0,0,0,99,100,5,94,
        0,0,100,101,5,94,0,0,101,12,1,0,0,0,102,103,5,91,0,0,103,14,1,0,
        0,0,104,105,5,93,0,0,105,16,1,0,0,0,106,107,5,116,0,0,107,108,5,
        114,0,0,108,109,5,117,0,0,109,116,5,101,0,0,110,111,5,102,0,0,111,
        112,5,97,0,0,112,113,5,108,0,0,113,114,5,115,0,0,114,116,5,101,0,
        0,115,106,1,0,0,0,115,110,1,0,0,0,116,18,1,0,0,0,117,122,3,39,19,
        0,118,122,3,41,20,0,119,122,3,43,21,0,120,122,3,45,22,0,121,117,
        1,0,0,0,121,118,1,0,0,0,121,119,1,0,0,0,121,120,1,0,0,0,122,20,1,
        0,0,0,123,128,5,60,0,0,124,127,8,0,0,0,125,127,3,47,23,0,126,124,
        1,0,0,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,
        1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,132,5,62,0,0,132,22,
        1,0,0,0,133,135,3,59,29,0,134,133,1,0,0,0,134,135,1,0,0,0,135,136,
        1,0,0,0,136,137,5,58,0,0,137,24,1,0,0,0,138,139,3,23,11,0,139,140,
        3,61,30,0,140,26,1,0,0,0,141,142,5,95,0,0,142,143,5,58,0,0,143,146,
        1,0,0,0,144,147,3,55,27,0,145,147,7,1,0,0,146,144,1,0,0,0,146,145,
        1,0,0,0,147,156,1,0,0,0,148,151,3,57,28,0,149,151,5,46,0,0,150,148,
        1,0,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,
        1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,155,157,3,57,28,0,156,152,
        1,0,0,0,156,157,1,0,0,0,157,28,1,0,0,0,158,160,5,64,0,0,159,161,
        7,2,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,
        1,0,0,0,163,172,1,0,0,0,164,166,5,45,0,0,165,167,7,3,0,0,166,165,
        1,0,0,0,167,168,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,
        1,0,0,0,170,164,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,
        1,0,0,0,173,30,1,0,0,0,174,172,1,0,0,0,175,177,7,4,0,0,176,175,1,
        0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,180,7,1,0,0,179,178,1,
        0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,32,1,0,
        0,0,183,185,7,4,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,189,1,0,
        0,0,186,188,7,1,0,0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,
        0,0,189,190,1,0,0,0,190,192,1,0,0,0,191,189,1,0,0,0,192,194,5,46,
        0,0,193,195,7,1,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,
        0,0,196,197,1,0,0,0,197,34,1,0,0,0,198,200,7,4,0,0,199,198,1,0,0,
        0,199,200,1,0,0,0,200,227,1,0,0,0,201,203,7,1,0,0,202,201,1,0,0,
        0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,
        0,206,210,5,46,0,0,207,209,7,1,0,0,208,207,1,0,0,0,209,212,1,0,0,
        0,210,208,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,
        0,213,228,3,37,18,0,214,216,5,46,0,0,215,217,7,1,0,0,216,215,1,0,
        0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,220,1,0,
        0,0,220,228,3,37,18,0,221,223,7,1,0,0,222,221,1,0,0,0,223,224,1,
        0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,228,3,
        37,18,0,227,202,1,0,0,0,227,214,1,0,0,0,227,222,1,0,0,0,228,36,1,
        0,0,0,229,231,7,5,0,0,230,232,7,4,0,0,231,230,1,0,0,0,231,232,1,
        0,0,0,232,234,1,0,0,0,233,235,7,1,0,0,234,233,1,0,0,0,235,236,1,
        0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,38,1,0,0,0,238,244,5,34,
        0,0,239,243,8,6,0,0,240,243,3,49,24,0,241,243,3,47,23,0,242,239,
        1,0,0,0,242,240,1,0,0,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,
        1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,
        5,34,0,0,248,40,1,0,0,0,249,255,5,39,0,0,250,254,8,7,0,0,251,254,
        3,49,24,0,252,254,3,47,23,0,253,250,1,0,0,0,253,251,1,0,0,0,253,
        252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,
        258,1,0,0,0,257,255,1,0,0,0,258,259,5,39,0,0,259,42,1,0,0,0,260,
        261,5,39,0,0,261,262,5,39,0,0,262,263,5,39,0,0,263,276,1,0,0,0,264,
        268,5,39,0,0,265,266,5,39,0,0,266,268,5,39,0,0,267,264,1,0,0,0,267,
        265,1,0,0,0,267,268,1,0,0,0,268,272,1,0,0,0,269,273,8,8,0,0,270,
        273,3,49,24,0,271,273,3,47,23,0,272,269,1,0,0,0,272,270,1,0,0,0,
        272,271,1,0,0,0,273,275,1,0,0,0,274,267,1,0,0,0,275,278,1,0,0,0,
        276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,276,1,0,0,0,
        279,280,5,39,0,0,280,281,5,39,0,0,281,282,5,39,0,0,282,44,1,0,0,
        0,283,284,5,34,0,0,284,285,5,34,0,0,285,286,5,34,0,0,286,299,1,0,
        0,0,287,291,5,34,0,0,288,289,5,34,0,0,289,291,5,34,0,0,290,287,1,
        0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,295,1,0,0,0,292,296,8,
        9,0,0,293,296,3,49,24,0,294,296,3,47,23,0,295,292,1,0,0,0,295,293,
        1,0,0,0,295,294,1,0,0,0,296,298,1,0,0,0,297,290,1,0,0,0,298,301,
        1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,
        1,0,0,0,302,303,5,34,0,0,303,304,5,34,0,0,304,305,5,34,0,0,305,46,
        1,0,0,0,306,307,5,92,0,0,307,308,5,117,0,0,308,309,1,0,0,0,309,310,
        3,67,33,0,310,311,3,67,33,0,311,312,3,67,33,0,312,313,3,67,33,0,
        313,327,1,0,0,0,314,315,5,92,0,0,315,316,5,85,0,0,316,317,1,0,0,
        0,317,318,3,67,33,0,318,319,3,67,33,0,319,320,3,67,33,0,320,321,
        3,67,33,0,321,322,3,67,33,0,322,323,3,67,33,0,323,324,3,67,33,0,
        324,325,3,67,33,0,325,327,1,0,0,0,326,306,1,0,0,0,326,314,1,0,0,
        0,327,48,1,0,0,0,328,329,5,92,0,0,329,330,7,10,0,0,330,50,1,0,0,
        0,331,332,7,11,0,0,332,333,1,0,0,0,333,334,6,25,0,0,334,52,1,0,0,
        0,335,336,7,12,0,0,336,54,1,0,0,0,337,340,3,53,26,0,338,340,5,95,
        0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,56,1,0,0,0,341,344,3,55,
        27,0,342,344,7,13,0,0,343,341,1,0,0,0,343,342,1,0,0,0,344,58,1,0,
        0,0,345,354,3,53,26,0,346,349,3,57,28,0,347,349,5,46,0,0,348,346,
        1,0,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,
        1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,355,3,57,28,0,354,350,
        1,0,0,0,354,355,1,0,0,0,355,60,1,0,0,0,356,360,3,55,27,0,357,360,
        2,48,58,0,358,360,3,63,31,0,359,356,1,0,0,0,359,357,1,0,0,0,359,
        358,1,0,0,0,360,374,1,0,0,0,361,365,3,57,28,0,362,365,7,14,0,0,363,
        365,3,63,31,0,364,361,1,0,0,0,364,362,1,0,0,0,364,363,1,0,0,0,365,
        368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,372,1,0,0,0,368,
        366,1,0,0,0,369,373,3,57,28,0,370,373,5,58,0,0,371,373,3,63,31,0,
        372,369,1,0,0,0,372,370,1,0,0,0,372,371,1,0,0,0,373,375,1,0,0,0,
        374,366,1,0,0,0,374,375,1,0,0,0,375,62,1,0,0,0,376,379,3,65,32,0,
        377,379,3,69,34,0,378,376,1,0,0,0,378,377,1,0,0,0,379,64,1,0,0,0,
        380,381,5,37,0,0,381,382,3,67,33,0,382,383,3,67,33,0,383,66,1,0,
        0,0,384,386,7,15,0,0,385,384,1,0,0,0,386,68,1,0,0,0,387,388,5,92,
        0,0,388,389,7,16,0,0,389,70,1,0,0,0,49,0,115,121,126,128,134,146,
        150,152,156,162,168,172,176,181,184,189,196,199,204,210,218,224,
        227,231,236,242,244,253,255,267,272,276,290,295,299,326,339,343,
        348,350,354,359,364,366,372,374,378,385,1,6,0,0
    ]

class TurtleLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    BooleanLiteral = 9
    String = 10
    IRIREF = 11
    PNAME_NS = 12
    PNAME_LN = 13
    BLANK_NODE_LABEL = 14
    LANGTAG = 15
    INTEGER = 16
    DECIMAL = 17
    DOUBLE = 18
    EXPONENT = 19
    STRING_LITERAL_QUOTE = 20
    STRING_LITERAL_SINGLE_QUOTE = 21
    STRING_LITERAL_LONG_SINGLE_QUOTE = 22
    STRING_LITERAL_LONG_QUOTE = 23
    UCHAR = 24
    ECHAR = 25
    WS = 26
    PN_CHARS_BASE = 27
    PN_CHARS_U = 28
    PN_CHARS = 29
    PN_PREFIX = 30
    PN_LOCAL = 31
    PLX = 32
    PERCENT = 33
    HEX = 34
    PN_LOCAL_ESC = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@prefix'", "'.'", "'@base'", "'BASE'", "'PREFIX'", "'^^'", 
            "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "BooleanLiteral", "String", "IRIREF", "PNAME_NS", "PNAME_LN", 
            "BLANK_NODE_LABEL", "LANGTAG", "INTEGER", "DECIMAL", "DOUBLE", 
            "EXPONENT", "STRING_LITERAL_QUOTE", "STRING_LITERAL_SINGLE_QUOTE", 
            "STRING_LITERAL_LONG_SINGLE_QUOTE", "STRING_LITERAL_LONG_QUOTE", 
            "UCHAR", "ECHAR", "WS", "PN_CHARS_BASE", "PN_CHARS_U", "PN_CHARS", 
            "PN_PREFIX", "PN_LOCAL", "PLX", "PERCENT", "HEX", "PN_LOCAL_ESC" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "BooleanLiteral", "String", "IRIREF", "PNAME_NS", 
                  "PNAME_LN", "BLANK_NODE_LABEL", "LANGTAG", "INTEGER", 
                  "DECIMAL", "DOUBLE", "EXPONENT", "STRING_LITERAL_QUOTE", 
                  "STRING_LITERAL_SINGLE_QUOTE", "STRING_LITERAL_LONG_SINGLE_QUOTE", 
                  "STRING_LITERAL_LONG_QUOTE", "UCHAR", "ECHAR", "WS", "PN_CHARS_BASE", 
                  "PN_CHARS_U", "PN_CHARS", "PN_PREFIX", "PN_LOCAL", "PLX", 
                  "PERCENT", "HEX", "PN_LOCAL_ESC" ]

    grammarFileName = "Turtle.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


