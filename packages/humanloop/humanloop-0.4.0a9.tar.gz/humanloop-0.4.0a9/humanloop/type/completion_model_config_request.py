# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.  To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:  ```bash pip install humanloop ```  To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:  ```bash npm i humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

    The version of the OpenAPI document: 4.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal

from humanloop.type.provider_api_keys import ProviderApiKeys

class RequiredCompletionModelConfigRequest(TypedDict):
    # Unique project name.
    project: str

    # The inputs passed to the prompt template.
    inputs: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Identifies the model configuration used to create a chat response.
    model_config_id: str

class OptionalCompletionModelConfigRequest(TypedDict, total=False):
    # Identifies where the model was called from.
    source: str

    # API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.
    provider_api_keys: ProviderApiKeys

    # The number of generations.
    num_samples: int

    # Include the log probabilities of the top n tokens in the provider_response
    logprobs: int

    # If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.
    stream: bool

    # The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.
    suffix: str

    # End-user ID passed through to provider call.
    user: str

    # Any additional metadata to record.
    metadata: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

class CompletionModelConfigRequest(RequiredCompletionModelConfigRequest, OptionalCompletionModelConfigRequest):
    pass
