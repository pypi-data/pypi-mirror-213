# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.  To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:  ```bash pip install humanloop ```  To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:  ```bash npm i humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

    The version of the OpenAPI document: 4.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal

from humanloop.type.chat_message import ChatMessage
from humanloop.type.model_endpoints import ModelEndpoints
from humanloop.type.model_providers import ModelProviders
from humanloop.type.src_external_app_models_v3_model_configs_project_model_config_feedback_stats_response import SrcExternalAppModelsV3ModelConfigsProjectModelConfigFeedbackStatsResponse

class RequiredProjectModelConfigResponse(TypedDict):
    # What model instance to use for the generation. e.g. text-davinci-002.
    model: str

    # Model config unique identifier generated by Humanloop.
    id: str

    created_at: datetime

    updated_at: datetime

    last_used: datetime

class OptionalProjectModelConfigResponse(TypedDict, total=False):
    # The company providing the underlying model service.
    provider: ModelProviders

    # Which of the providers model endpoints to use. For example Complete or Edit.
    endpoint: ModelEndpoints

    # Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.
    prompt_template: str

    # Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.
    chat_template: typing.List[ChatMessage]

    # What sampling temperature to use when making a generation. Higher values means the model will be more creative.
    temperature: typing.Union[int, float]

    # The maximum number of tokens to generate in the completion.
    max_tokens: int

    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
    top_p: typing.Union[int, float]

    # The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.
    stop: typing.Union[str, typing.List[str]]

    # Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.
    presence_penalty: typing.Union[int, float]

    # Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.
    frequency_penalty: typing.Union[int, float]

    # Other parameter values to be passed to the provider call.
    other: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # A friendly display name for the model config.
    display_name: str

    # String ID of project the model config belongs to. Starts with `pr_`.
    project_id: str

    # Name of the project the model config belongs to.
    project_name: str

    # Feedback statistics for the project model config.
    feedback_stats: typing.List[SrcExternalAppModelsV3ModelConfigsProjectModelConfigFeedbackStatsResponse]

    # Number of datapoints associated with this project model config.
    num_datapoints: int

    # The ID of the experiment the model config has been registered to. Only populated when registering a model config to an experiment.
    experiment_id: str

class ProjectModelConfigResponse(RequiredProjectModelConfigResponse, OptionalProjectModelConfigResponse):
    pass
