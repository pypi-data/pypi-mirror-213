# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.  To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:  ```bash pip install humanloop ```  To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:  ```bash npm i humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

    The version of the OpenAPI document: 4.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal

from humanloop.type.chat_message import ChatMessage
from humanloop.type.config_response import ConfigResponse
from humanloop.type.feedback import Feedback
from humanloop.type.project_config_response import ProjectConfigResponse

class RequiredLogResponse(TypedDict):
    # Function name. If it does not exist, a new function will be created.
    project: str

    config: ConfigResponse

    # String ID of logged datapoint. Starts with `data_`.
    id: str

    # String ID of project the datapoint belongs to. Starts with `pr_`.
    project_id: str

class OptionalLogResponse(TypedDict, total=False):
    # A unique string to reference the datapoint. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a subsequent log request.
    reference_id: str

    # Session ID.
    session_id: str

    # A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.
    session_reference_id: str

    # Id associated to the parent datapoint. Useful when providing a trace from a chain.
    parent_id: str

    # A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.
    parent_reference_id: str

    # Unique ID of an experiment trial to associate to the log.
    trial_id: str

    # The inputs passed to the prompt template.
    inputs: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # The messages passed to the to provider chat endpoint.
    messages: typing.List[ChatMessage]

    # Generated output from your model for the provided inputs.
    output: str

    # Identifies where the model was called from.
    source: str

    # Additional metadata logged for reference.
    metadata: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Feedback associated to the datapoint.
    feedback: typing.Union[Feedback, typing.List[Feedback]]

    # Timestamp for when the datapoint was created.
    created_at: datetime

    # Error message if the log is an error.
    error: str

    # Duration of the logged event in seconds.
    duration: typing.Union[int, float]

    # The config used for this datapoint.
    model_config: ProjectConfigResponse

    # User email address provided when creating the datapoint.
    user: str

    # Original response from the provider.
    provider_response: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Latency of provider response.
    provider_latency: typing.Union[int, float]

    # Raw output from the provider.
    raw_output: str

    # Reason the generation finished.
    finish_reason: str

class LogResponse(RequiredLogResponse, OptionalLogResponse):
    pass
