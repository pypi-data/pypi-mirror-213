from . import config as config, formatter as formatter
from _typeshed import Incomplete
from pathlib import PurePath
from typing import Dict, Iterable, Optional, Sequence, Union

logger: Incomplete

def load_plugin(module: str, force: bool = ..., *, cache: Dict = ...) -> Optional['Plugin']: ...
def get_names() -> Iterable[str]: ...
def search_plugins(*modules: str, force: bool = ...): ...

class Plugin:
    formatters: Sequence[formatter.BaseFormatter]
    config_loaders: Sequence[config.ConfigFileLoader]
    configs: Sequence[Union[str, PurePath]]
    def __init__(self) -> None: ...
    def get_config(self): ...
    def add_arguments(self, parser) -> None: ...
    def parse_known_args(self, args, namespace): ...

class ProxyPlugin(Plugin):
    configs: Incomplete
    def __init__(self, original) -> None: ...
