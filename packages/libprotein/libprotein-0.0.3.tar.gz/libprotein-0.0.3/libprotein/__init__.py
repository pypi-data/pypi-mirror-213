# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libprotein
else:
    import _libprotein

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libprotein.delete_SwigPyIterator

    def value(self):
        return _libprotein.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libprotein.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libprotein.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libprotein.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libprotein.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libprotein.SwigPyIterator_copy(self)

    def next(self):
        return _libprotein.SwigPyIterator_next(self)

    def __next__(self):
        return _libprotein.SwigPyIterator___next__(self)

    def previous(self):
        return _libprotein.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libprotein.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libprotein.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libprotein.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libprotein.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libprotein.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libprotein.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libprotein.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libprotein:
_libprotein.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libprotein.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libprotein.IntVector___nonzero__(self)

    def __bool__(self):
        return _libprotein.IntVector___bool__(self)

    def __len__(self):
        return _libprotein.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libprotein.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libprotein.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libprotein.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libprotein.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libprotein.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libprotein.IntVector___setitem__(self, *args)

    def pop(self):
        return _libprotein.IntVector_pop(self)

    def append(self, x):
        return _libprotein.IntVector_append(self, x)

    def empty(self):
        return _libprotein.IntVector_empty(self)

    def size(self):
        return _libprotein.IntVector_size(self)

    def swap(self, v):
        return _libprotein.IntVector_swap(self, v)

    def begin(self):
        return _libprotein.IntVector_begin(self)

    def end(self):
        return _libprotein.IntVector_end(self)

    def rbegin(self):
        return _libprotein.IntVector_rbegin(self)

    def rend(self):
        return _libprotein.IntVector_rend(self)

    def clear(self):
        return _libprotein.IntVector_clear(self)

    def get_allocator(self):
        return _libprotein.IntVector_get_allocator(self)

    def pop_back(self):
        return _libprotein.IntVector_pop_back(self)

    def erase(self, *args):
        return _libprotein.IntVector_erase(self, *args)

    def __init__(self, *args):
        _libprotein.IntVector_swiginit(self, _libprotein.new_IntVector(*args))

    def push_back(self, x):
        return _libprotein.IntVector_push_back(self, x)

    def front(self):
        return _libprotein.IntVector_front(self)

    def back(self):
        return _libprotein.IntVector_back(self)

    def assign(self, n, x):
        return _libprotein.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libprotein.IntVector_resize(self, *args)

    def insert(self, *args):
        return _libprotein.IntVector_insert(self, *args)

    def reserve(self, n):
        return _libprotein.IntVector_reserve(self, n)

    def capacity(self):
        return _libprotein.IntVector_capacity(self)
    __swig_destroy__ = _libprotein.delete_IntVector

# Register IntVector in _libprotein:
_libprotein.IntVector_swigregister(IntVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libprotein.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libprotein.StringVector___nonzero__(self)

    def __bool__(self):
        return _libprotein.StringVector___bool__(self)

    def __len__(self):
        return _libprotein.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _libprotein.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libprotein.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libprotein.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libprotein.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libprotein.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libprotein.StringVector___setitem__(self, *args)

    def pop(self):
        return _libprotein.StringVector_pop(self)

    def append(self, x):
        return _libprotein.StringVector_append(self, x)

    def empty(self):
        return _libprotein.StringVector_empty(self)

    def size(self):
        return _libprotein.StringVector_size(self)

    def swap(self, v):
        return _libprotein.StringVector_swap(self, v)

    def begin(self):
        return _libprotein.StringVector_begin(self)

    def end(self):
        return _libprotein.StringVector_end(self)

    def rbegin(self):
        return _libprotein.StringVector_rbegin(self)

    def rend(self):
        return _libprotein.StringVector_rend(self)

    def clear(self):
        return _libprotein.StringVector_clear(self)

    def get_allocator(self):
        return _libprotein.StringVector_get_allocator(self)

    def pop_back(self):
        return _libprotein.StringVector_pop_back(self)

    def erase(self, *args):
        return _libprotein.StringVector_erase(self, *args)

    def __init__(self, *args):
        _libprotein.StringVector_swiginit(self, _libprotein.new_StringVector(*args))

    def push_back(self, x):
        return _libprotein.StringVector_push_back(self, x)

    def front(self):
        return _libprotein.StringVector_front(self)

    def back(self):
        return _libprotein.StringVector_back(self)

    def assign(self, n, x):
        return _libprotein.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libprotein.StringVector_resize(self, *args)

    def insert(self, *args):
        return _libprotein.StringVector_insert(self, *args)

    def reserve(self, n):
        return _libprotein.StringVector_reserve(self, n)

    def capacity(self):
        return _libprotein.StringVector_capacity(self)
    __swig_destroy__ = _libprotein.delete_StringVector

# Register StringVector in _libprotein:
_libprotein.StringVector_swigregister(StringVector)

class Uniprot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libprotein.Uniprot_swiginit(self, _libprotein.new_Uniprot())

    def set_uniprot_id(self, idd):
        return _libprotein.Uniprot_set_uniprot_id(self, idd)

    def set_uniprot_seq(self, seqq):
        return _libprotein.Uniprot_set_uniprot_seq(self, seqq)

    def set_uniprot_location(self, loc):
        return _libprotein.Uniprot_set_uniprot_location(self, loc)

    def add_to_interactwith(self, inter):
        return _libprotein.Uniprot_add_to_interactwith(self, inter)

    def add_to_pdb_struct(self, pdb):
        return _libprotein.Uniprot_add_to_pdb_struct(self, pdb)

    def get_uniprot_id(self):
        return _libprotein.Uniprot_get_uniprot_id(self)

    def get_uniprot_seq(self):
        return _libprotein.Uniprot_get_uniprot_seq(self)

    def get_uniprot_location(self):
        return _libprotein.Uniprot_get_uniprot_location(self)

    def affich_interactwith(self):
        return _libprotein.Uniprot_affich_interactwith(self)

    def affich_pdb_struct(self):
        return _libprotein.Uniprot_affich_pdb_struct(self)

    def get_list_pdb(self):
        return _libprotein.Uniprot_get_list_pdb(self)
    __swig_destroy__ = _libprotein.delete_Uniprot

# Register Uniprot in _libprotein:
_libprotein.Uniprot_swigregister(Uniprot)

class Ptm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libprotein.Ptm_swiginit(self, _libprotein.new_Ptm())

    def set_ptm_pos(self, pos):
        return _libprotein.Ptm_set_ptm_pos(self, pos)

    def set_ptm_name(self, name):
        return _libprotein.Ptm_set_ptm_name(self, name)

    def get_ptm_pos(self):
        return _libprotein.Ptm_get_ptm_pos(self)

    def get_ptm_name(self):
        return _libprotein.Ptm_get_ptm_name(self)
    __swig_destroy__ = _libprotein.delete_Ptm

# Register Ptm in _libprotein:
_libprotein.Ptm_swigregister(Ptm)

class Scop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libprotein.Scop_swiginit(self, _libprotein.new_Scop())

    def set_scop_familyID(self, id):
        return _libprotein.Scop_set_scop_familyID(self, id)

    def set_scop_desc(self, desc):
        return _libprotein.Scop_set_scop_desc(self, desc)

    def get_scop_familyID(self):
        return _libprotein.Scop_get_scop_familyID(self)

    def get_scop_desc(self):
        return _libprotein.Scop_get_scop_desc(self)
    __swig_destroy__ = _libprotein.delete_Scop

# Register Scop in _libprotein:
_libprotein.Scop_swigregister(Scop)

class Cath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libprotein.Cath_swiginit(self, _libprotein.new_Cath())

    def set_superfamily_id(self, id):
        return _libprotein.Cath_set_superfamily_id(self, id)

    def set_cath_desc(self, desc):
        return _libprotein.Cath_set_cath_desc(self, desc)

    def get_superfamily_id(self):
        return _libprotein.Cath_get_superfamily_id(self)

    def get_cath_desc(self):
        return _libprotein.Cath_get_cath_desc(self)
    __swig_destroy__ = _libprotein.delete_Cath

# Register Cath in _libprotein:
_libprotein.Cath_swigregister(Cath)

class Pfam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libprotein.Pfam_swiginit(self, _libprotein.new_Pfam())

    def set_pfam_id(self, id):
        return _libprotein.Pfam_set_pfam_id(self, id)

    def set_pfam_name(self, name):
        return _libprotein.Pfam_set_pfam_name(self, name)

    def set_start(self, st):
        return _libprotein.Pfam_set_start(self, st)

    def set_end(self, ed):
        return _libprotein.Pfam_set_end(self, ed)

    def get_pfam_id(self):
        return _libprotein.Pfam_get_pfam_id(self)

    def get_pfam_name(self):
        return _libprotein.Pfam_get_pfam_name(self)

    def get_start(self):
        return _libprotein.Pfam_get_start(self)

    def get_end(self):
        return _libprotein.Pfam_get_end(self)
    __swig_destroy__ = _libprotein.delete_Pfam

# Register Pfam in _libprotein:
_libprotein.Pfam_swigregister(Pfam)

class Libprotein(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libprotein.Libprotein_swiginit(self, _libprotein.new_Libprotein(*args))

    def set_uniprot_info(self, u):
        return _libprotein.Libprotein_set_uniprot_info(self, u)

    def add_to_PtmList(self, p):
        return _libprotein.Libprotein_add_to_PtmList(self, p)

    def add_to_ScopList(self, s):
        return _libprotein.Libprotein_add_to_ScopList(self, s)

    def add_to_CathList(self, c):
        return _libprotein.Libprotein_add_to_CathList(self, c)

    def add_to_PfamList(self, pf):
        return _libprotein.Libprotein_add_to_PfamList(self, pf)

    def printUniprotInfo(self):
        return _libprotein.Libprotein_printUniprotInfo(self)

    def printListPtm(self):
        return _libprotein.Libprotein_printListPtm(self)

    def printListScop(self):
        return _libprotein.Libprotein_printListScop(self)

    def printListCath(self):
        return _libprotein.Libprotein_printListCath(self)

    def printListPfam(self):
        return _libprotein.Libprotein_printListPfam(self)

    def downloadFile(self, urlToDownload, filesName):
        return _libprotein.Libprotein_downloadFile(self, urlToDownload, filesName)

    def get_code_ptm(self, p):
        return _libprotein.Libprotein_get_code_ptm(self, p)

    def annotateMyprot(self, id):
        return _libprotein.Libprotein_annotateMyprot(self, id)

    def get_dom_pos(self):
        return _libprotein.Libprotein_get_dom_pos(self)

    def get_list_ptm(self):
        return _libprotein.Libprotein_get_list_ptm(self)

    def get_list_pdb(self):
        return _libprotein.Libprotein_get_list_pdb(self)
    __swig_destroy__ = _libprotein.delete_Libprotein

# Register Libprotein in _libprotein:
_libprotein.Libprotein_swigregister(Libprotein)



